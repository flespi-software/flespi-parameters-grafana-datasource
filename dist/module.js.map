{"version":3,"file":"module.js","mappings":"oIAAAA,EAAOC,QAAUC,C,UCAjBF,EAAOC,QAAUE,C,UCAjBH,EAAOC,QAAUG,C,UCAjBJ,EAAOC,QAAUI,C,UCAjBL,EAAOC,QAAUK,C,UCAjBN,EAAOC,QAAUM,C,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaV,QAGrB,IAAID,EAASQ,EAAyBE,GAAY,CAGjDT,QAAS,CAAC,GAOX,OAHAY,EAAoBH,GAAUV,EAAQA,EAAOC,QAASQ,GAG/CT,EAAOC,OACf,CCrBAQ,EAAoBK,EAAKd,IACxB,IAAIe,EAASf,GAAUA,EAAOgB,WAC7B,IAAOhB,EAAiB,QACxB,IAAM,EAEP,OADAS,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAAChB,EAASkB,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEpB,EAASmB,IAC5EE,OAAOC,eAAetB,EAASmB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK9B,IACH,oBAAX+B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAetB,EAAS+B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAetB,EAAS,aAAc,CAAEiC,OAAO,GAAO,E,kFCLvD,SAASC,EAAWD,GACvB,MAAwB,mBAAVA,CAClB,CCcA,IAAIE,EAAgB,SAASnB,EAAGoB,GAI9B,OAHAD,EAAgBd,OAAOgB,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUvB,EAAGoB,GAAKpB,EAAEsB,UAAYF,CAAG,GAC1E,SAAUpB,EAAGoB,GAAK,IAAK,IAAII,KAAKJ,EAAOf,OAAOM,UAAUC,eAAeC,KAAKO,EAAGI,KAAIxB,EAAEwB,GAAKJ,EAAEI,GAAI,EAC7FL,EAAcnB,EAAGoB,EAC1B,EAEO,SAASK,EAAUzB,EAAGoB,GAC3B,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIM,UAAU,uBAAyBC,OAAOP,GAAK,iCAE7D,SAASQ,IAAOC,KAAKC,YAAc9B,CAAG,CADtCmB,EAAcnB,EAAGoB,GAEjBpB,EAAEW,UAAkB,OAANS,EAAaf,OAAO0B,OAAOX,IAAMQ,EAAGjB,UAAYS,EAAET,UAAW,IAAIiB,EACjF,CA2IO,SAASI,EAAS5B,GACvB,IAAI6B,EAAsB,mBAAXlB,QAAyBA,OAAOmB,SAAUC,EAAIF,GAAK7B,EAAE6B,GAAIG,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEtB,KAAKT,GACrB,GAAIA,GAAyB,iBAAbA,EAAEiC,OAAqB,MAAO,CAC1CC,KAAM,WAEF,OADIlC,GAAKgC,GAAKhC,EAAEiC,SAAQjC,OAAI,GACrB,CAAEa,MAAOb,GAAKA,EAAEgC,KAAMG,MAAOnC,EACxC,GAEJ,MAAM,IAAIsB,UAAUO,EAAI,0BAA4B,kCACtD,CAEO,SAASO,EAAOpC,EAAGP,GACxB,IAAIsC,EAAsB,mBAAXpB,QAAyBX,EAAEW,OAAOmB,UACjD,IAAKC,EAAG,OAAO/B,EACf,IAAmBU,EAAY2B,EAA3BL,EAAID,EAAEtB,KAAKT,GAAOsC,EAAK,GAC3B,IACI,WAAc,IAAN7C,GAAgBA,KAAM,MAAQiB,EAAIsB,EAAEE,QAAQC,MAAMG,EAAGC,KAAK7B,EAAEG,MACxE,CACA,MAAO2B,GAASH,EAAI,CAAEG,MAAOA,EAAS,CACtC,QACI,IACQ9B,IAAMA,EAAEyB,OAASJ,EAAIC,EAAU,SAAID,EAAEtB,KAAKuB,EAClD,CACA,QAAU,GAAIK,EAAG,MAAMA,EAAEG,KAAO,CACpC,CACA,OAAOF,CACT,CAkBO,SAASG,EAAcC,EAAIC,EAAMC,GACtC,GAAIA,GAA6B,IAArBC,UAAUZ,OAAc,IAAK,IAA4BK,EAAxBN,EAAI,EAAGc,EAAIH,EAAKV,OAAYD,EAAIc,EAAGd,KACxEM,GAAQN,KAAKW,IACRL,IAAIA,EAAKnB,MAAMZ,UAAUwC,MAAMtC,KAAKkC,EAAM,EAAGX,IAClDM,EAAGN,GAAKW,EAAKX,IAGrB,OAAOU,EAAGM,OAAOV,GAAMnB,MAAMZ,UAAUwC,MAAMtC,KAAKkC,GACpD,CArE6B1C,OAAO0B,OA0GX1B,OAAO0B,OCjQzB,ICICsB,EDJGC,ICIHD,EDHG,SAAiCE,GCD3B,IAAUC,IDEZ3B,KCDP4B,MAAM5C,KAAK2C,GACXA,EAASE,OAAQ,IAAID,OAAQC,MDC7B7B,KAAK8B,QAAUJ,EACTA,EAAOlB,OAAS,4CAA8CkB,EAAOK,KAAI,SAAUC,EAAKzB,GAAK,OAAOA,EAAI,EAAI,KAAOyB,EAAIC,UAAY,IAAGC,KAAK,QAC3I,GACNlC,KAAKmC,KAAO,sBACZnC,KAAK0B,OAASA,CAClB,GCHS5C,UAAYN,OAAO0B,OAAO0B,MAAM9C,WACzC0C,EAAS1C,UAAUmB,YAAcuB,EAC1BA,GCRJ,SAASY,EAAUC,EAAKC,GAC3B,GAAID,EAAK,CACL,IAAIE,EAAQF,EAAIG,QAAQF,GACxB,GAAKC,GAASF,EAAII,OAAOF,EAAO,EACpC,CACJ,CCDA,IAAIG,EAAgB,WAChB,SAASA,EAAaC,GAClB3C,KAAK2C,gBAAkBA,EACvB3C,KAAK4C,QAAS,EACd5C,KAAK6C,WAAa,KAClB7C,KAAK8C,YAAc,IACvB,CA+GqB,IACbC,EAIR,OAnHAL,EAAa5D,UAAUkE,YAAc,WACjC,IAAIC,EAAKC,EAAIC,EAAKC,EACd1B,EACJ,IAAK1B,KAAK4C,OAAQ,CACd5C,KAAK4C,QAAS,EACd,IAAIC,EAAa7C,KAAK6C,WACtB,GAAIA,EAEA,GADA7C,KAAK6C,WAAa,KACdnD,MAAM2D,QAAQR,GACd,IACI,IAAK,IAAIS,EAAenD,EAAS0C,GAAaU,EAAiBD,EAAa7C,QAAS8C,EAAe7C,KAAM6C,EAAiBD,EAAa7C,OACrH8C,EAAenE,MACrBoE,OAAOxD,KAExB,CACA,MAAOyD,GAASR,EAAM,CAAElC,MAAO0C,EAAS,CACxC,QACI,IACQF,IAAmBA,EAAe7C,OAASwC,EAAKI,EAAaI,SAASR,EAAGlE,KAAKsE,EACtF,CACA,QAAU,GAAIL,EAAK,MAAMA,EAAIlC,KAAO,CACxC,MAGA8B,EAAWW,OAAOxD,MAG1B,IAAI2D,EAAmB3D,KAAK2C,gBAC5B,GAAItD,EAAWsE,GACX,IACIA,GACJ,CACA,MAAO/C,GACHc,EAASd,aAAaa,EAAsBb,EAAEc,OAAS,CAACd,EAC5D,CAEJ,IAAIkC,EAAc9C,KAAK8C,YACvB,GAAIA,EAAa,CACb9C,KAAK8C,YAAc,KACnB,IACI,IAAK,IAAIc,EAAgBzD,EAAS2C,GAAce,EAAkBD,EAAcnD,QAASoD,EAAgBnD,KAAMmD,EAAkBD,EAAcnD,OAAQ,CACnJ,IAAIqD,EAAYD,EAAgBzE,MAChC,IACI2E,EAAcD,EAClB,CACA,MAAO9B,GACHN,EAASA,QAAuCA,EAAS,GACrDM,aAAeP,EACfC,EAASV,EAAcA,EAAc,GAAIL,EAAOe,IAAUf,EAAOqB,EAAIN,SAGrEA,EAAOZ,KAAKkB,EAEpB,CACJ,CACJ,CACA,MAAOgC,GAASb,EAAM,CAAEpC,MAAOiD,EAAS,CACxC,QACI,IACQH,IAAoBA,EAAgBnD,OAAS0C,EAAKQ,EAAcF,SAASN,EAAGpE,KAAK4E,EACzF,CACA,QAAU,GAAIT,EAAK,MAAMA,EAAIpC,KAAO,CACxC,CACJ,CACA,GAAIW,EACA,MAAM,IAAID,EAAoBC,EAEtC,CACJ,EACAgB,EAAa5D,UAAUmF,IAAM,SAAUC,GACnC,IAAIhB,EACJ,GAAIgB,GAAYA,IAAalE,KACzB,GAAIA,KAAK4C,OACLmB,EAAcG,OAEb,CACD,GAAIA,aAAoBxB,EAAc,CAClC,GAAIwB,EAAStB,QAAUsB,EAASC,WAAWnE,MACvC,OAEJkE,EAASE,WAAWpE,KACxB,EACCA,KAAK8C,YAA0C,QAA3BI,EAAKlD,KAAK8C,mBAAgC,IAAPI,EAAgBA,EAAK,IAAIpC,KAAKoD,EAC1F,CAER,EACAxB,EAAa5D,UAAUqF,WAAa,SAAUE,GAC1C,IAAIxB,EAAa7C,KAAK6C,WACtB,OAAOA,IAAewB,GAAW3E,MAAM2D,QAAQR,IAAeA,EAAWyB,SAASD,EACtF,EACA3B,EAAa5D,UAAUsF,WAAa,SAAUC,GAC1C,IAAIxB,EAAa7C,KAAK6C,WACtB7C,KAAK6C,WAAanD,MAAM2D,QAAQR,IAAeA,EAAW/B,KAAKuD,GAASxB,GAAcA,EAAa,CAACA,EAAYwB,GAAUA,CAC9H,EACA3B,EAAa5D,UAAUyF,cAAgB,SAAUF,GAC7C,IAAIxB,EAAa7C,KAAK6C,WAClBA,IAAewB,EACfrE,KAAK6C,WAAa,KAEbnD,MAAM2D,QAAQR,IACnBT,EAAUS,EAAYwB,EAE9B,EACA3B,EAAa5D,UAAU0E,OAAS,SAAUU,GACtC,IAAIpB,EAAc9C,KAAK8C,YACvBA,GAAeV,EAAUU,EAAaoB,GAClCA,aAAoBxB,GACpBwB,EAASK,cAAcvE,KAE/B,EACA0C,EAAa8B,QACLzB,EAAQ,IAAIL,GACVE,QAAS,EACRG,GAEJL,CACX,CA3HmB,GAkInB,SAASqB,EAAcD,GACfzE,EAAWyE,GACXA,IAGAA,EAAUd,aAElB,CAZgCN,EAAa8B,MCjItC,IAAI,EACW,KADX,EAEgB,KAFhB,GAIgC,EAJhC,GAKmB,ECJnBC,EAAkB,CACzBC,WAAY,SAAUC,EAASC,GAE3B,IADA,IAAIC,EAAO,GACFC,EAAK,EAAGA,EAAK1D,UAAUZ,OAAQsE,IACpCD,EAAKC,EAAK,GAAK1D,UAAU0D,GAE7B,IAAIC,EAAWN,EAAgBM,SAC/B,OAAIA,aAA2C,EAASA,EAASL,YACtDK,EAASL,WAAWM,MAAMD,EAAU/D,EAAc,CAAC2D,EAASC,GAAUjE,EAAOkE,KAEjFH,WAAWM,WAAM,EAAQhE,EAAc,CAAC2D,EAASC,GAAUjE,EAAOkE,IAC7E,EACAI,aAAc,SAAUC,GACpB,IAAIH,EAAWN,EAAgBM,SAC/B,QAASA,aAA2C,EAASA,EAASE,eAAiBA,cAAcC,EACzG,EACAH,cAAUjH,GCjBP,SAASqH,IAAS,CCAlB,IAAIC,EAA8CC,EAAmB,SAAKvH,OAAWA,GAOrF,SAASuH,EAAmBC,EAAMlG,EAAO2B,GAC5C,MAAO,CACHuE,KAAMA,EACNlG,MAAOA,EACP2B,MAAOA,EAEf,CCZA,ICQIwE,EAAc,SAAUC,GAExB,SAASD,EAAWE,GAChB,INsHuBrG,EMtHnBsG,EAAQF,EAAOxG,KAAKgB,OAASA,KAWjC,OAVA0F,EAAMC,WAAY,EACdF,GACAC,EAAMD,YAAcA,INmHDrG,EMlHAqG,aNmHF/C,GACpBtD,GAAS,WAAYA,GAASC,EAAWD,EAAMoE,SAAWnE,EAAWD,EAAM6E,MAAQ5E,EAAWD,EAAM4D,eMnH7FyC,EAAYxB,IAAIyB,IAIpBA,EAAMD,YAAcG,EAEjBF,CACX,CAwDA,OAtEA9F,EAAU2F,EAAYC,GAetBD,EAAWrF,OAAS,SAAUO,EAAMM,EAAO8E,GACvC,OAAO,IAAIC,EAAerF,EAAMM,EAAO8E,EAC3C,EACAN,EAAWzG,UAAU2B,KAAO,SAAUrB,GAC9BY,KAAK2F,UACLI,EF1BL,SAA0B3G,GAC7B,OAAOiG,EAAmB,IAAKjG,OAAOtB,EAC1C,CEwBsCkI,CAAiB5G,GAAQY,MAGnDA,KAAKiG,MAAM7G,EAEnB,EACAmG,EAAWzG,UAAUiC,MAAQ,SAAUiB,GAC/BhC,KAAK2F,UACLI,EFpCDV,EAAmB,SAAKvH,EEoCqBkE,GAAMhC,OAGlDA,KAAK2F,WAAY,EACjB3F,KAAKkG,OAAOlE,GAEpB,EACAuD,EAAWzG,UAAU+G,SAAW,WACxB7F,KAAK2F,UACLI,EAA0BX,EAAuBpF,OAGjDA,KAAK2F,WAAY,EACjB3F,KAAKmG,YAEb,EACAZ,EAAWzG,UAAUkE,YAAc,WAC1BhD,KAAK4C,SACN5C,KAAK2F,WAAY,EACjBH,EAAO1G,UAAUkE,YAAYhE,KAAKgB,MAClCA,KAAKyF,YAAc,KAE3B,EACAF,EAAWzG,UAAUmH,MAAQ,SAAU7G,GACnCY,KAAKyF,YAAYhF,KAAKrB,EAC1B,EACAmG,EAAWzG,UAAUoH,OAAS,SAAUlE,GACpC,IACIhC,KAAKyF,YAAY1E,MAAMiB,EAC3B,CACA,QACIhC,KAAKgD,aACT,CACJ,EACAuC,EAAWzG,UAAUqH,UAAY,WAC7B,IACInG,KAAKyF,YAAYI,UACrB,CACA,QACI7F,KAAKgD,aACT,CACJ,EACOuC,CACX,CAxEiB,CAwEf7C,GAEE0D,EAAQC,SAASvH,UAAUwH,KAC/B,SAASA,EAAKC,EAAIC,GACd,OAAOJ,EAAMpH,KAAKuH,EAAIC,EAC1B,CACA,IAAIC,EAAoB,WACpB,SAASA,EAAiBC,GACtB1G,KAAK0G,gBAAkBA,CAC3B,CAqCA,OApCAD,EAAiB3H,UAAU2B,KAAO,SAAUrB,GACxC,IAAIsH,EAAkB1G,KAAK0G,gBAC3B,GAAIA,EAAgBjG,KAChB,IACIiG,EAAgBjG,KAAKrB,EACzB,CACA,MAAO2B,GACH4F,EAAqB5F,EACzB,CAER,EACA0F,EAAiB3H,UAAUiC,MAAQ,SAAUiB,GACzC,IAAI0E,EAAkB1G,KAAK0G,gBAC3B,GAAIA,EAAgB3F,MAChB,IACI2F,EAAgB3F,MAAMiB,EAC1B,CACA,MAAOjB,GACH4F,EAAqB5F,EACzB,MAGA4F,EAAqB3E,EAE7B,EACAyE,EAAiB3H,UAAU+G,SAAW,WAClC,IAAIa,EAAkB1G,KAAK0G,gBAC3B,GAAIA,EAAgBb,SAChB,IACIa,EAAgBb,UACpB,CACA,MAAO9E,GACH4F,EAAqB5F,EACzB,CAER,EACO0F,CACX,CAzCuB,GA0CnBX,EAAkB,SAAUN,GAE5B,SAASM,EAAec,EAAgB7F,EAAO8E,GAC3C,IACIa,EASIG,EAVJnB,EAAQF,EAAOxG,KAAKgB,OAASA,KAyBjC,OAvBIX,EAAWuH,KAAoBA,EAC/BF,EAAkB,CACdjG,KAAOmG,QAAuDA,OAAiB9I,EAC/EiD,MAAOA,QAAqCA,OAAQjD,EACpD+H,SAAUA,QAA2CA,OAAW/H,GAKhE4H,GAAS,IACTmB,EAAYrI,OAAO0B,OAAO0G,IAChB5D,YAAc,WAAc,OAAO0C,EAAM1C,aAAe,EAClE0D,EAAkB,CACdjG,KAAMmG,EAAenG,MAAQ6F,EAAKM,EAAenG,KAAMoG,GACvD9F,MAAO6F,EAAe7F,OAASuF,EAAKM,EAAe7F,MAAO8F,GAC1DhB,SAAUe,EAAef,UAAYS,EAAKM,EAAef,SAAUgB,KAIvEH,EAAkBE,EAG1BlB,EAAMD,YAAc,IAAIgB,EAAiBC,GAClChB,CACX,CACA,OA7BA9F,EAAUkG,EAAgBN,GA6BnBM,CACX,CA/BqB,CA+BnBP,GAEF,SAASoB,EAAqB5F,GACtB,GCjKD,SAA8BiB,GACjCyC,EAAgBC,YAAW,WAEvB,IADuB,EAKnB,MAAM1C,EALa,EAEFA,EAKzB,GACJ,CD2JQ8E,CAAqB/F,EAE7B,CAIA,SAASgF,EAA0BgB,EAAcC,GAC7C,IAAIC,EAAwB,EAC5BA,GAAyBxC,EAAgBC,YAAW,WAAc,OAAOuC,EAAsBF,EAAcC,EAAa,GAC9H,CACO,I,MAAIpB,EAAiB,CACxBhD,QAAQ,EACRnC,KAAM0E,EACNpE,MAVJ,SAA6BiB,GACzB,MAAMA,CACV,EASI6D,SAAUV,GEhLV+B,EAAsB,SAAU1B,GAEhC,SAAS0B,EAAmBzB,EAAa0B,EAAQC,EAAYC,EAASC,EAAYC,GAC9E,IAAI7B,EAAQF,EAAOxG,KAAKgB,KAAMyF,IAAgBzF,KAuC9C,OAtCA0F,EAAM4B,WAAaA,EACnB5B,EAAM6B,kBAAoBA,EAC1B7B,EAAMO,MAAQkB,EACR,SAAU/H,GACR,IACI+H,EAAO/H,EACX,CACA,MAAO4C,GACHyD,EAAY1E,MAAMiB,EACtB,CACJ,EACEwD,EAAO1G,UAAUmH,MACvBP,EAAMQ,OAASmB,EACT,SAAUrF,GACR,IACIqF,EAAQrF,EACZ,CACA,MAAOA,GACHyD,EAAY1E,MAAMiB,EACtB,CACA,QACIhC,KAAKgD,aACT,CACJ,EACEwC,EAAO1G,UAAUoH,OACvBR,EAAMS,UAAYiB,EACZ,WACE,IACIA,GACJ,CACA,MAAOpF,GACHyD,EAAY1E,MAAMiB,EACtB,CACA,QACIhC,KAAKgD,aACT,CACJ,EACEwC,EAAO1G,UAAUqH,UAChBT,CACX,CASA,OAnDA9F,EAAUsH,EAAoB1B,GA2C9B0B,EAAmBpI,UAAUkE,YAAc,WACvC,IAAIE,EACJ,IAAKlD,KAAKuH,mBAAqBvH,KAAKuH,oBAAqB,CACrD,IAAIC,EAAWxH,KAAK4C,OACpB4C,EAAO1G,UAAUkE,YAAYhE,KAAKgB,OACjCwH,IAAwC,QAA1BtE,EAAKlD,KAAKsH,kBAA+B,IAAPpE,GAAyBA,EAAGlE,KAAKgB,MACtF,CACJ,EACOkH,CACX,CArDyB,CAqDvB3B,GCxDK,SAASxD,EAAI0F,EAASjB,GACzB,OCCoBkB,EDDL,SAAUC,EAAQX,GAC7B,IAAIzE,EAAQ,EACZoF,EAAOC,UDFJ,IAAIV,ECEmCF,GAAY,SAAU5H,GAC5D4H,EAAWvG,KAAKgH,EAAQzI,KAAKwH,EAASpH,EAAOmD,KACjD,QDLsD6E,OAAYC,OAASC,GCM/E,ECHO,SAAUK,GACb,GALD,SAAiBA,GACpB,OAAOtI,EAAWsI,aAAuC,EAASA,EAAOE,KAC7E,CAGYC,CAAQH,GACR,OAAOA,EAAOE,MAAK,SAAUE,GACzB,IACI,OAAOL,EAAKK,EAAc/H,KAC9B,CACA,MAAOgC,GACHhC,KAAKe,MAAMiB,EACf,CACJ,IAEJ,MAAM,IAAInC,UAAU,yCACxB,EAbG,IAAiB6H,CDKxB,C,4TEuCO,MAAMM,EAOT,4BAAaC,CAAsBC,G,kBAAnC,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,mCAC5BC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAaA,qCAAaC,CAA+BC,EAAkBV,G,kBAA9D,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAAqC,CAC5EH,IAAKA,EAAM,EAAKI,UAAY,eAAeM,kBAC3CL,OAAQ,QAGNM,SADiBL,EAAAA,EAAAA,eAAcL,IACVM,KAAKC,OAAO,GAAGG,UAC1C,GAAmB,OAAdA,EACD,OAAOC,QAAQC,QAAQ,IAE3B,MAAMC,EAA6B,GACnC,IAAM,MAAMC,KAAaJ,EACrBG,EAA2BlI,KAAKmI,GAGpC,OAAOD,CACX,GAhBA,E,CAqBA,iCAAOE,CAA2BN,EAAkBO,EAAsBjB,EAAahH,EAAcD,EAAYmI,EAAsBC,GAEnI,IAAIC,EAAoB,WAAWpI,UAAaD,IAUhD,YAToBnD,IAAhBsL,IAA8C,YAAhBA,GAA6C,YAAhBA,GAA6C,YAAhBA,SACrEtL,IAAhBuL,GAA6BA,GAAe,KAC/CC,GAAqB,iBAAiBD,eAAyBD,MAEnEE,GAAqB,cACrBA,GAAqBH,EAAWjH,KAAK,KACrCoH,GAAqB,gBAGdlB,EAAAA,EAAAA,iBAAgBC,MAA0B,CAC7CH,IAAKA,EAAMlI,KAAKsI,UAAY,eAAeM,mBAA0BU,IACrEf,OAAQ,OAEhB,CAKA,6BAAOgB,CAAuBX,EAAkBO,EAAsBjB,EAAahH,EAAcD,GAE7F,IAAIqI,EAAoB,WAAWpI,UAAaD,IAMhD,OALAqI,GAAqB,cACrBA,GAAqBH,EAAWjH,KAAK,KACrCoH,GAAqB,gBAGdlB,EAAAA,EAAAA,iBAAgBC,MAA0B,CAC7CH,IAAKA,EAAMlI,KAAKsI,UAAY,eAAeM,eAAsBU,IACjEf,OAAQ,OAEhB,CAMA,gCAAaiB,CAA0BtB,G,kBAAvC,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,6CAC5BC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAcA,yBAAae,CAAmBvB,G,kBAAhC,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,sCAC5BC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAaA,gDAAagB,CAA0CC,EAAmBzB,G,kBAA1E,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAAwC,CAC/EH,IAAKA,EAAM,EAAKI,UAAY,kFAC5BC,OAAQ,MACRqB,QAAS,CACL,eAAgBD,KAIlBE,SADiBrB,EAAAA,EAAAA,eAAcL,IACTM,KAAKC,OAAO,GACxC,GAAoB,OAAfmB,EACD,OAAOf,QAAQC,QAAQ,IAE3B,MAAMe,EAAuB,GAC7B,IAAM,MAAMb,KAAaY,EACrBC,EAAqBhJ,KAAKmI,GAG9B,OAAOa,CACX,GAnBA,E,CAwBA,oCAAOC,CAA8BJ,EAAmBR,EAAsBjB,EAAahH,EAAcD,EAAYmI,EAAsBC,GAEvI,IAAIC,EAAoB,WAAWpI,UAAaD,IAUhD,YAToBnD,IAAhBsL,IAA8C,YAAhBA,GAA6C,YAAhBA,GAA6C,YAAhBA,SACrEtL,IAAhBuL,GAA6BA,GAAe,KAC/CC,GAAqB,iBAAiBD,eAAyBD,MAEnEE,GAAqB,cACrBA,GAAqBH,EAAWjH,KAAK,KACrCoH,GAAqB,gBAGdlB,EAAAA,EAAAA,iBAAgBC,MAA0B,CAC7CH,IAAKA,EAAMlI,KAAKsI,UAAY,sCAAsCgB,IAClEf,OAAQ,MACRqB,QAAS,CACL,eAAgBD,IAG5B,CAMA,4BAAaK,CAAsB9B,G,kBAAnC,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,mCAC5BC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAaA,6BAAOuB,CAAuBC,EAAkBf,EAAsBjB,EAAahH,EAAcD,GAE7F,IAAIqI,EAAoB,WAAWpI,UAAaD,IAMhD,OALAqI,GAAqB,cACrBA,GAAqBH,EAAWjH,KAAK,KACrCoH,GAAqB,gBAGdlB,EAAAA,EAAAA,iBAAgBC,MAA0B,CAC7CH,IAAKA,EAAMlI,KAAKsI,UAAY,eAAe4B,eAAsBZ,IACjEf,OAAQ,OAEhB,CAMA,+BAAa4B,CAAyBjC,G,kBAAtC,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,2CAC5BC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAaA,qCAAa0B,CAA+BC,EAAqBnC,EAAaoC,G,kBAA9E,eACI,MAAMnC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAAwC,CAC/EH,IAAKA,EAAM,EAAKI,UAAY,uBAAuB+B,2DAAqEC,MACxH/B,OAAQ,QAGNgC,SADiB/B,EAAAA,EAAAA,eAAcL,IACbM,KAAKC,OAAO,GAAG6B,OACvC,GAAe,OAAXA,EACA,OAAOzB,QAAQC,QAAQ,IAE3B,MAAMyB,EAAgC,GAKtC,OAJAhM,OAAOiM,KAAKF,GAAQxI,KAAI2I,IACpBF,EAAoB1J,KAAK4J,EAAM,IAG5BF,CACX,GAhBA,E,CAqBA,oCAAOG,CAA8BN,EAAqBlB,EAAsBjB,EAAahH,EAAcD,EAAYmI,EAAsBC,GAEzI,IAAIC,EAAoB,eAAepI,iBAAoBD,IAU3D,YAToBnD,IAAhBsL,IAA8C,YAAhBA,GAA6C,YAAhBA,GAA6C,YAAhBA,SACrEtL,IAAhBuL,GAA6BA,GAAe,KAC/CC,GAAqB,iBAAiBD,eAAyBD,MAEnEE,GAAqB,cACrBA,GAAqBH,EAAWjH,KAAK,KACrCoH,GAAqB,gBAGdlB,EAAAA,EAAAA,iBAAgBC,MAA0B,CAC7CH,IAAKA,EAAMlI,KAAKsI,UAAY,uBAAuB+B,mBAA6Bf,IAChFf,OAAQ,OAEhB,CAMA,gCAAaqC,CAA0B1C,G,kBAAvC,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,iCAC5BC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAcA,6CAAamC,CAAuCC,EAAgB5C,G,kBAApE,eACI,MAAMC,GAAqBC,EAAAA,EAAAA,iBAAgBC,MAA8B,CACrEH,IAAKA,EAAM,EAAKI,UAAY,wBAAwBwC,qBACpDvC,OAAQ,QAIZ,aADuBC,EAAAA,EAAAA,eAAcL,IACrBM,KAAKC,MACzB,GARA,E,CAaA,oCAAaqC,CAA8BD,EAAgB5C,G,kBAA3D,eACI,MAAMC,GAAsBC,EAAAA,EAAAA,iBAAgBC,MAAwC,CAChFH,IAAKA,EAAM,EAAKI,UAAY,aAAawC,+BACzCvC,OAAQ,QAGNgC,SADiB/B,EAAAA,EAAAA,eAAcL,IACbM,KAAKC,OAAO,GACpC,GAAe,OAAX6B,EACA,OAAOzB,QAAQC,QAAQ,IAE3B,MAAMyB,EAAgC,GAKtC,OAJAhM,OAAOiM,KAAKF,GAAQxI,KAAI2I,IACpBF,EAAoB1J,KAAK4J,EAAM,IAG5BF,CACX,GAhBA,E,CAqBA,2BAAOQ,CAAqBF,EAAgBlC,EAAkBO,EAAsBjB,EAAahH,EAAcD,GAC3G,IAAIqI,EAAoB,YAAYpI,WAAcD,IAKlD,OAJAqI,GAAqB,cACrBA,GAAqBH,EAAWjH,KAAK,KACrCoH,GAAqB,gBAEdlB,EAAAA,EAAAA,iBAAgBC,MAAwC,CAC3DH,IAAKA,EAAMlI,KAAKsI,UAAY,aAAawC,aAAkBlC,wBAA+BU,IAC1Ff,OAAQ,OAEhB,E,EA5SmB,W,EAAZD,e,EADEN,G,sFC7CN,MAAMiD,EAAgB,mDAChBC,EAAiB,uDAEjBC,EAAmB,2DACnBC,EAAoB,oHAEpBC,EAAqB,UACrBC,EAAwB,aACxBC,EAAkB,OAClBC,EAAwB,aACxBC,EAAuB,YAEvBC,EAAqD,CAC9D,CAAEC,MAAO,UAAWvM,MAAOiM,GAC3B,CAAEM,MAAO,aAAcvM,MAAOkM,GAC9B,CAAEK,MAAO,OAAQvM,MAAOmM,GACxB,CAAEI,MAAO,YAAavM,MAAOqM,GAC7B,CAAEE,MAAO,aAAcvM,MAAOoM,IAGrBI,EAAmB,UAEnBC,EAAmD,CAC5D,CAAEF,MAAO,OAAQvM,MAAO,QACxB,CAAEuM,MAAO,UAAWvM,MAAOwM,GAC3B,CAAED,MAAO,UAAWvM,MAAO,WAC3B,CAAEuM,MAAO,UAAWvM,MAAO,YAGlB0M,EAAqB,SACrBC,EAAqB,SAErBC,GAAsD,CAC/D,CAAEL,MAAO,SAAUvM,MAAO0M,GAC1B,CAAEH,MAAO,SAAUvM,MAAO2M,IAGjBE,GAA6D,CACtE,CAAEN,MAAO,OAAQvM,MAAO,QACxB,CAAEuM,MAAO,OAAQvM,MAAO,QACxB,CAAEuM,MAAO,OAAQvM,MAAO,SAGf8M,GAA6D,CACtE,CAAEP,MAAO,WAAYvM,MAAO,YAC5B,CAAEuM,MAAO,cAAevM,MAAO,eAC/B,CAAEuM,MAAO,OAAQvM,MAAO,QACxB,CAAEuM,MAAO,WAAYvM,MAAO,YAC5B,CAAEuM,MAAO,UAAWvM,MAAO,YAIxB,SAAS+M,GAAoCC,GAEhD,YAAwBtO,IAApBsO,EAAMC,gBAA4CvO,IAAjBsO,EAAME,SAEvCF,EAAMC,UAAYhB,EACU,iBAAjBe,EAAME,QACbF,EAAMG,mBAAoB,EAC1BH,EAAMI,gBAAkB,CAAC,CAACb,MAAOS,EAAMK,YAAarN,MAA+B,iBAAjBgN,EAAME,OAAsBF,EAAME,OAASI,SAASN,EAAME,OAAQ,QAEpIF,EAAMG,mBAAoB,EAC1BH,EAAMO,eAAiBP,EAAME,aAEbxO,IAAhBsO,EAAM1B,QACF0B,EAAM1B,MAAMpG,SAAS,MACrB8H,EAAMQ,uBAAwB,EAC9BR,EAAMS,mBAAqBT,EAAM1B,QAEjC0B,EAAMQ,uBAAwB,EAC9BR,EAAMU,oBAAsB,GAC5BV,EAAMU,oBAAoBhM,KAAKsL,EAAM1B,SAG7C0B,EAAMW,4BAAwCjP,IAAfsO,EAAMY,KAAqBZ,EAAMY,KAAOpB,SAChEQ,EAAM1B,aACN0B,EAAMY,YACNZ,EAAME,cACNF,EAAMK,aAEN,EAGf,C,8eCjFO,MAAMQ,GAAuB,CAACC,EACDd,EACAe,EACAC,EACAC,EACAC,EACAC,KAChC,GAAmB,KAAfL,EAGA,YADAG,EAAS,IAIb,MAAMG,EAAwB,G,SAC9BC,EAAAA,EAAAA,kBAAiBC,QAAQR,OAAYpP,OAAWA,EAAW0P,GACvDA,EAAe,KAAkC,IAA5BA,EAAe,GAAGG,OAEvCP,EAAYF,GACZG,EAAS,IACTC,G,yUAAS,IAAKlB,G,WAAAA,CAAO,CAACe,GAAiBD,I,kVACvCK,KAGAF,EAAS,iCAAiCH,iCAC9C,EAISU,GAAwB,CAACC,EAAkBC,KAE7C,CAACC,KAAM,IAAID,OADS,KAAd,EAAoBD,EAASH,QAAQ,MAAM,KAAO,aACzBtO,MAAO0O,IAIpCE,GAAsB,CAACH,EAAkBC,KAE3C,CAACnC,MAAO,IAAImC,OADQ,KAAd,EAAoBD,EAASH,QAAQ,MAAM,KAAO,aACxBtO,MAAO0O,IAIrCG,GAA2C,CAACC,EAA+CC,IAC7FD,EAAcnM,KAAIO,I,IAOdA,EANP,QAAmBxE,IAAfwE,EAAKlD,MACL,MAAM,IAAIwC,MAAM,0CAKpB,YAHoB9D,IAAhBqQ,IACAA,EAAY7L,EAAKlD,MAAM6C,YAAcK,EAAKqJ,MAAQrJ,EAAKqJ,MAAQ,IAElD,QAAVrJ,EAAAA,EAAKlD,aAALkD,IAAAA,OAAAA,EAAAA,EAAYL,UAAU,IAKxBmM,GAAoC,CAACC,EAAsBC,EAAwBH,KAE5F,MAAMI,GAAQd,EAAAA,EAAAA,kBAAiBC,QAAQW,EAAcC,EAAY,OAAOE,MAAM,KAC9E,QAAoB1Q,IAAhBqQ,EAA2B,CAE3B,MAAMM,GAAkBhB,EAAAA,EAAAA,kBAAiBiB,eAAeC,MAAKC,GAAa,IAAIA,EAASzM,SAAWkM,IAClG,QAAwBvQ,IAApB2Q,EAA+B,CAE/B,MAAMI,EAAoCC,KAAKC,MAAMD,KAAKE,UAAUP,IAAkBI,QAEtFN,EAAMxM,KAAI+L,IACNe,EAAQF,MAAKM,IACYA,EAAO7P,MAAMoP,MAAM,KAAK,KACxBV,IAEjBK,EAAYL,EAAO7L,YAAcgN,EAAOlB,KAC5C,GACF,GAEV,CACJ,CACA,OAAOQ,CAAK,EAIHW,GAA+B,CAACC,EAAyBC,EAAeC,KAGjF,MAAMC,EAAa,GAObC,EAAwB,CAAC,EAEzBC,EAA4B,GAElC,IAAIC,EAAoB,EAGxB,MAAMC,EAAWP,EAAS1G,KAAKC,OACzBiH,EAAgBD,EAASlP,OAC/B,GAAsB,IAAlBmP,EACA,MAAO,CAAElH,KAAM,IAEnB,IAAK,IAAIlI,EAAI,EAAGA,EAAIoP,EAAepP,IAAK,CACpC,IAAIuB,EAAe4N,EAASnP,QACRzC,IAAhBgE,EAAQxD,UAAwCR,IAAnBgE,EAAQyI,SACrCzI,EAAUA,EAAQyI,QAGtB,IAAI,UAAEqF,GAA8B9N,EAAhB+N,EAAAA,GAAgB/N,EAAAA,CAA9B8N,cACN,MAAME,EAAOF,EAAwB,IAAZA,EAAiC,IAAd9N,EAAQxD,IACpDgR,EAAWxO,KAAKgP,GAGhB,IAAK,IAAIC,EAAK,EAAGA,EAAKP,EAAgBhP,OAAQuP,IAAM,CAChD,MAAMC,EAAgBR,EAAgBO,GACtCR,EAAiBS,GAAelP,UAAoChD,IAA/B+R,EAAYG,GAA+BH,EAAYG,GAAiB,aAEtGH,EAAYG,EACvB,CAEAxR,OAAOiM,KAAKoF,GAAa9N,KAAIiO,IAEzB,MAAMC,EAAiBJ,EAAYG,GACnCT,EAAiBS,GAAiB,GAClC,IAAK,IAAIE,EAAM,EAAGA,EAAMT,EAAmBS,IACvCX,EAAiBS,GAAelP,KAAK,MAEzCyO,EAAiBS,GAAelP,KAAKmP,GAErCT,EAAgB1O,KAAKkP,EAAc,IAGvCP,GACJ,CAEA,OAAOU,GAAgBb,EAAYC,EAAkBH,EAAOC,EAAO,EAiCjEc,GAAkB,CAACb,EAAsBC,EAAwCH,EAAeC,KAElG,MAAMe,EAAQ,IAAIC,EAAAA,iBAAiB,CAC/BjB,MAAOA,EACPkB,OAAQ,CACJ,CAAEnO,KAAM,OAAQoO,KAAMC,EAAAA,UAAUV,KAAMW,OAAQnB,MA6BtD,OA1BA9Q,OAAOiM,KAAK8E,GAAkBxN,KAAI2O,IAC9B,GAAInB,EAAiBmB,GAAWlQ,OAAS,EAAG,CACxC,IAAImQ,EACJ,cAAepB,EAAiBmB,GAAW,IACvC,IAAK,SACDC,EAAYH,EAAAA,UAAUI,OACtB,MACJ,IAAK,SACDD,EAAYH,EAAAA,UAAUK,OACtB,MACJ,IAAK,UACDF,EAAYH,EAAAA,UAAUM,QACtB,MACJ,QACIH,EAAYH,EAAAA,UAAUO,MAG9BX,EAAMY,SAAS,CACX7O,KAAMuO,EACNH,KAAMI,EACNF,OAAQlB,EAAiBmB,GACzBrB,YAAoBvR,IAAZ,EAAyB,CAACwE,KAAM,IAAI+M,WAAavR,GAEjE,KAGG,CAAE2K,KAAM,CAAC2H,GAAQ,E,gUC5LrB,MAAMa,GAAiC,CAC1C5E,UAAWhB,EAEXkB,mBAAmB,EACnBC,gBAAiB,GACjBG,eAAgB,GAChBC,uBAAuB,EACvBE,oBAAqB,GACrBD,mBAAoB,GAEpBqE,oBAAoB,EACpBC,iBAAkB,GAClBC,gBAAiB,GACjBC,sBAAsB,EACtBC,mBAAoB,GACpBC,kBAAmB,GAEnBxE,uBAAwB,UAExByE,eAAgB1F,EAChB2F,uBAAuB,EACvBC,oBAAqB,GACrBC,mBAAoB,GACpBC,sBAAsB,EACtBC,mBAAoB,GACpBC,kBAAmB,GAEnBC,sBAAsB,EACtBC,mBAAoB,GACpBC,kBAAmB,GACnBC,sBAAsB,EACtBC,mBAAoB,GACpBC,kBAAmB,GAEnBC,uBAAuB,EACvBC,oBAAqB,GACrBC,mBAAoB,GACpBC,uBAAuB,EACvBC,oBAAqB,GACrBC,mBAAoB,GACpBC,qBAAqB,EACrBC,kBAAmB,GACnBC,iBAAkB,IAGf,MAAMC,WAAmBC,EAAAA,cAWtBC,eAAAA,CAAgB5G,EAAeyC,G,kBAArC,gBACI,GFrE+B,cEqE3BzC,EAAM6G,OAEN,aAAcjL,EAAWgC,sBAAsB,EAAK9B,MAAMnG,KAAImR,GAAWtF,GAAsBsF,EAAO/Q,KAAM+Q,EAAOC,MAEvH,MAAMC,GAAe3F,EAAAA,EAAAA,kBAAiBC,QAAQtB,EAAM6G,OAAQpE,EAAQP,WAAY,OAChF,IAAI+E,EAAsBD,EAAaE,MAAMrI,GAC7C,GAA4B,OAAxBoI,EAA8B,CAE9B,GAA+B,cAA3BA,EAAoB,GAEpB,aAAcrL,EAAUC,sBAAsB,EAAKC,MAAMnG,KAAIwR,GAAW3F,GAAsB2F,EAAOpR,KAAMoR,EAAOJ,MAC/G,CAGH,MAAMvK,EAAWyK,EAAoB,GAErC,aAAcrL,EAAUW,+BAA+BC,EAAU,EAAKV,MAAMnG,KAAKkH,IAAuB,CAAE8E,KAAM9E,KACpH,CACJ,CAEA,GADAoK,EAAsBD,EAAaE,MAAMpI,GACb,OAAxBmI,EAA8B,CAE9B,GAA+B,eAA3BA,EAAoB,GAAqB,CAEzC,MAAMG,QAAiB1K,QAAQ2K,IAAI,CAC/BzL,EAAUyB,mBAAmB,EAAKvB,KAClCF,EAAUwB,0BAA0B,EAAKtB,OAE7C,aAAcY,QAAQ2K,IAAID,IACrBE,OACA3R,KAAI4R,GAAY/F,GAAsB+F,EAAQxR,KAAMwR,EAAQR,KACrE,CAAO,CAGH,MAAMxJ,EAAY0J,EAAoB,GAItC,aAAcrL,EAAU0B,0CAA0CC,EAAW,EAAKzB,MAAMnG,KAAKkH,IAAuB,CAAE8E,KAAM9E,KAChI,CACJ,CAGA,GADAoK,EAAsBD,EAAaE,MAAMnI,GACb,OAAxBkI,EAA8B,CAE9B,GAA+B,iBAA3BA,EAAoB,GAEpB,aAAcrL,EAAUmC,yBAAyB,EAAKjC,MAAMnG,KAAI6R,GAAchG,GAAsBgG,EAAUzR,KAAMyR,EAAUT,MAC3H,CAGH,MAAM9I,EAAcqC,SAAS2G,EAAoB,GAAI,IAErD,aAAcrL,EAAUoC,+BAA+BC,EAAa,EAAKnC,IAAK,KAAKnG,KAAKkH,IAAuB,CAAE8E,KAAM9E,KAC3H,CACJ,CAGA,GADAoK,EAAsBD,EAAaE,MAAMlI,GACd,MAAvBiI,EAA6B,CAC7B,GAA+B,kBAA3BA,EAAoB,GAEpB,aAAcrL,EAAU4C,0BAA0B,EAAK1C,MAAMnG,KAAI8R,GAAejG,GAAsBiG,EAAW1R,KAAM0R,EAAWV,MAC/H,GAAIE,EAAoB,GAAGS,SAAS,cAAe,CAEtD,MAAMC,EAAerH,SAAS2G,EAAoB,GAAI,IACtD,aAAcrL,EAAU6C,uCAAuCkJ,EAAc,EAAK7L,MAAMnG,KAAIwR,GAAW3F,GAAsB2F,EAAOpR,KAAMoR,EAAOJ,KACrJ,CAAO,CAEH,MAAMY,EAAeV,EAAoB,GAEzC,aAAcrL,EAAU+C,8BAA8BgJ,EAAc,EAAK7L,MAAMnG,KAAKkH,IAAuB,CAAE8E,KAAM9E,KACvH,CACJ,CAEA,OAAOH,QAAQC,QAAQ,GAC3B,GA5EA,E,CA+EMiL,cAAAA,G,kBAAN,gBAEI,MAAMC,QAAsBjM,EAAUC,sBAAsB,EAAKC,KAC3DgM,QAAsBlM,EAAUyB,mBAAmB,EAAKvB,KACxDiM,QAA0BnM,EAAUwB,0BAA0B,EAAKtB,KACnEkM,QAAsBpM,EAAUgC,sBAAsB,EAAK9B,KACjE,MAAO,CACHmM,OAAQ,UACRvS,QAAS,+CAA+CmS,EAAczT,0BAA0B4T,EAAc5T,8BAA8B0T,EAAc,GAAGf,UAAUgB,EAAkB3T,sBAEjM,GAVA,E,CAaA4L,KAAAA,CAAMyC,GAEF,MAAMyF,EAA4DzF,EAAQ0F,QAAQxS,KAAKqK,IAEnFoI,QAAQC,IAAI3F,KAAKE,UAAU5C,IAG3BD,GAAoCC,GAGpC,MAAM,MAAEsI,GAAU7F,EACZ3N,EAAOyT,KAAKC,MAAMF,EAAOxT,KAAK2T,UAAY,KAC1C5T,EAAK0T,KAAKG,KAAKJ,EAAOzT,GAAG4T,UAAY,KAGrCzL,EAAcgD,EAAMW,uBAC1B,IAAI1D,EACJ,QAAoBvL,IAAhBsL,IAA8C,YAAhBA,GAA6C,YAAhBA,GAA6C,YAAhBA,GAA4B,CACpH,MAAM2L,EAAc,EAASzG,WAAW0G,cAAiBnG,EAAQP,WAAW0G,cAAc5V,MAAQ,IAAO,EACnG6V,EAAgBpG,EAAQoG,cAAgBpG,EAAQoG,cAAgB,GAClEF,EAAc,IAAuB,IAAhBA,GAAqBE,EAAgB,IAAOhU,EAAKC,GAAM6T,EAAcE,KAE1F5L,EAAcsL,KAAKC,OAAO3T,EAAKC,GAAO+T,GAE9C,CAGA,OAAO7I,EAAMC,WACT,KAAKhB,EACD,IAAI6J,EAAmBC,EAA2BC,EAA0C,CAAC,EAe7F,GAZIF,GAF4B,IAA5B9I,EAAMG,kBAEI6B,GAAkChC,EAAMO,eAAgBkC,EAAQP,WAAY8G,GAG5EnH,GAAyC7B,EAAMI,gBAAiB4I,GAK1ED,GAFgC,IAAhC/I,EAAMQ,uBAEYa,EAAAA,EAAAA,kBAAiBC,QAAQtB,EAAMS,mBAAoBgC,EAAQP,WAAY,OAAOE,MAAM,KAEpFpC,EAAMU,oBAEL,IAAnBoI,EAAQ1U,QAA2C,IAA3B2U,EAAgB3U,OACxC,OAAO,IAAI6U,EAAAA,WAEfb,QAAQC,IAAI,mBAAqBS,EAAU,iBAAmBC,EAAkB,MAEhF,MAAMG,EAA4BJ,EAAQnT,KAAIwR,GACfvL,EAAUkB,2BAA2BqK,EAAQ4B,EAAiBnV,KAAKkI,IAAKhH,EAAMD,EAAImI,EAAaC,GACzHkM,KACGxT,GAAKoN,GAAaD,GAA6BC,EAAU/C,EAAMgD,MAAQ,IAAMmE,EAAQ,EAAS/S,OAAS,GAAKqO,EAAQ0F,QAAQ/T,OAAS,EAAK4U,EAAc7B,EAAOtR,iBAAcnE,QAIrL,OAAO0X,EAAAA,EAAAA,UAASF,GAEpB,KAAKhK,EAED,IAAIkI,EAAoBiC,EAA0BC,EAA2C,CAAC,EAgB9F,GAZIlC,GAF6B,IAA7BpH,EAAM8E,mBAEK9C,GAAkChC,EAAMgF,gBAAiBvC,EAAQP,WAAYoH,GAG7EzH,GAAyC7B,EAAM+E,iBAAkBuE,GAK5ED,GAF+B,IAA/BrJ,EAAMiF,sBAEW5D,EAAAA,EAAAA,kBAAiBC,QAAQtB,EAAMmF,kBAAmB1C,EAAQP,WAAY,OAAOE,MAAM,KAEnFpC,EAAMkF,mBAEH,IAApBkC,EAAShT,QAA0C,IAA1BiV,EAAejV,OACxC,OAAO,IAAI6U,EAAAA,WAKf,GAFAb,QAAQC,IAAI,gCAAkCjB,EAAW,iBAAmBiC,EAAiB,MAEzF/V,MAAM2D,QAAQmQ,IAAiC,IAApBA,EAAShT,QAAgBd,MAAM2D,QAAQoS,IAA6C,IAA1BA,EAAejV,OAEpG,OAAO,IAAI6U,EAAAA,WAGf,MAAMM,EAA6BnC,EAASzR,KAAI4R,GACjB3L,EAAU+B,8BAA8B4J,EAAS8B,EAAgBzV,KAAKkI,IAAKhH,EAAMD,EAAImI,EAAaC,GAC5HkM,KACGxT,GAAKoN,GAAaD,GAA6BC,EAAU/C,EAAMgD,MAAQ,IAAMuE,EAAS,EAAUnT,OAAS,GAAKqO,EAAQ0F,QAAQ/T,OAAS,EAAKkV,EAAe/B,EAAQ1R,iBAAcnE,QAIzL,OAAO0X,EAAAA,EAAAA,UAASG,GAEpB,KAAKpK,EAED,IAAIqK,EAOJ,OAJIA,GAF+B,IAA/BxJ,EAAMwF,sBAEUnE,EAAAA,EAAAA,kBAAiBC,QAAQtB,EAAM0F,kBAAmBjD,EAAQP,WAAY,OAAOE,MAAM,KAEnFpC,EAAMyF,mBAElBzF,EAAMoF,gBACV,KAAK1F,EACD,IAAIoJ,EAAmBE,EAA0C,CAAC,EAQlE,GALIF,GAFgC,IAAhC9I,EAAMqF,sBAEIrD,GAAkChC,EAAMuF,mBAAoB9C,EAAQP,WAAY8G,GAGhFnH,GAAyC7B,EAAMsF,oBAAqB0D,GAE3D,IAAnBF,EAAQ1U,QAAyC,IAAzBoV,EAAcpV,OACtC,OAAO,IAAI6U,EAAAA,WAEfb,QAAQC,IAAI,yBAA2BS,EAAU,iBAAmBU,EAAgB,MAEpF,MAAMN,EAA4BJ,EAAQnT,KAAIwR,GACfvL,EAAUuB,uBAAuBgK,EAAQqC,EAAe5V,KAAKkI,IAAKhH,EAAMD,GAClGsU,KACGxT,GAAKoN,GAAaD,GAA6BC,EAAU/C,EAAMgD,MAAQ,IAAMmE,EAAQ,EAAS/S,OAAS,GAAKqO,EAAQ0F,QAAQ/T,OAAS,EAAK4U,EAAc7B,EAAOtR,iBAAcnE,QAIrL,OAAO0X,EAAAA,EAAAA,UAASF,GAEpB,KAAKvJ,EACD,IAAI8J,EAAmBC,EAA0C,CAAC,EAQlE,GALID,GAFgC,IAAhCzJ,EAAMqF,sBAEIrD,GAAkChC,EAAMuF,mBAAoB9C,EAAQP,WAAYwH,GAGhF7H,GAAyC7B,EAAMsF,oBAAqBoE,GAE3D,IAAnBD,EAAQrV,QAAyC,IAAzBoV,EAAcpV,OACtC,OAAO,IAAI6U,EAAAA,WAEfb,QAAQC,IAAI,yBAA2BoB,EAAU,iBAAmBD,EAAgB,MAEpF,MAAMG,EAA4BF,EAAQ9T,KAAImR,GACflL,EAAUiC,uBAAuBiJ,EAAQ0C,EAAe5V,KAAKkI,IAAKhH,EAAMD,GAClGsU,KACGxT,GAAKoN,GAAaD,GAA6BC,EAAU/C,EAAMgD,MAAQ,IAAM8D,EAAQ,EAAS1S,OAAS,GAAKqO,EAAQ0F,QAAQ/T,OAAS,EAAKsV,EAAc5C,EAAOjR,iBAAcnE,QAIrL,OAAO0X,EAAAA,EAAAA,UAASO,GAEpB,QACI,OAAO,IAAIV,EAAAA,WAGvB,KAAK7J,EACD,IAAIwK,EAAsBC,EAA0BC,EAA6C,CAAC,EAclG,GAXIF,GAF+B,IAA/B5J,EAAM2F,qBAEO3D,GAAkChC,EAAM6F,kBAAmBpD,EAAQP,WAAY4H,GAE/EjI,GAAyC7B,EAAM4F,mBAAoBkE,GAKhFD,GAF+B,IAA/B7J,EAAM8F,sBAEWzE,EAAAA,EAAAA,kBAAiBC,QAAQtB,EAAMgG,kBAAmBvD,EAAQP,WAAY,OAAOE,MAAM,KAEnFpC,EAAM+F,mBAED,IAAtB6D,EAAWxV,QAA0C,IAA1ByV,EAAezV,OAC1C,OAAO,IAAI6U,EAAAA,WAEfb,QAAQC,IAAI,sBAAwBuB,EAAa,iBAAmBC,EAAiB,MAErF,MAAME,EAA+BH,EAAWjU,KAAI6R,GACrB5L,EAAU2C,8BAA8BiJ,EAAWqC,EAAgBjW,KAAKkI,IAAKhH,EAAMD,EAAImI,EAAaC,GAC9HkM,KACGxT,GAAKoN,GAAaD,GAA6BC,EAAU/C,EAAMgD,MAAQ,IAAMwE,EAAW,EAAYpT,OAAS,GAAKqO,EAAQ0F,QAAQ/T,OAAS,EAAK0V,EAAiBtC,EAAU3R,iBAAcnE,QAIjM,OAAO0X,EAAAA,EAAAA,UAASW,GAEpB,KAAK1K,EACD,IAAI2K,EAAuBC,EAAuBC,EAC9CC,EAA8C,CAAC,EAAGC,EAA8C,CAAC,EAgBrG,GAdIJ,GADgC,IAAhChK,EAAMiG,sBACQjE,GAAkChC,EAAMmG,mBAAoB1D,EAAQP,WAAYiI,GAEhFtI,GAAyC7B,EAAMkG,oBAAqBiE,GAGlFF,GADgC,IAAhCjK,EAAMoG,sBACQpE,GAAkChC,EAAMsG,mBAAoB7D,EAAQP,WAAYkI,GAEhFvI,GAAyC7B,EAAMqG,oBAAqB+D,GAGlFF,GAD8B,IAA9BlK,EAAMuG,qBACUlF,EAAAA,EAAAA,kBAAiBC,QAAQtB,EAAMyG,iBAAkBhE,EAAQP,WAAY,OAAOE,MAAM,KAElFpC,EAAMwG,kBAEC,IAAvBwD,EAAY5V,QAAuC,IAAvB6V,EAAY7V,QAAyC,IAAzB8V,EAAc9V,OACtE,OAAO,IAAI6U,EAAAA,WAGfb,QAAQC,IAAI,kCAAoC2B,EAAc,kBAAoBC,EAAc,aAAeC,GAC/G,MAAMG,EAAiCL,EAAYrU,KAAI8R,IACnD,MAAM6C,EAA8BL,EAAYtU,KAAIwR,GACrBvL,EAAUgD,qBAAqB6I,EAAYN,EAAQ+C,EAAetW,KAAKkI,IAAKhH,EAAMD,GAC5GsU,KACGxT,GAAKoN,GD5OO,EAACA,EAAyBhG,EAAsBiG,EAAeC,KACvG,MAAM3G,EAASyG,EAAS1G,KAAKC,OAC7B,GAAsB,IAAlBA,EAAOlI,OACP,MAAO,CAAEiI,KAAM,IAKnB,MAAM6G,EAAa,GACbC,EAAwB,CAAC,EACzBoH,EAAiBjO,EAAOlI,OAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIoW,EAAgBpW,IAAK,CACrC,IAAIqW,EAAgBlO,EAAOnI,GAE3B+O,EAAWxO,KAAsB,IAAjB8V,EAASC,OACzBvH,EAAWxO,KAAoB,IAAf8V,EAASE,KACzB,IAAK,MAAM7N,KAAaE,EACpB,QAA4BrL,IAAxB8Y,EAAS3N,GAA0B,MACCnL,IAAhCyR,EAAiBtG,KACjBsG,EAAiBtG,GAAa,IAElC,MAAM8N,EAAkBxH,EAAiBtG,GACzC8N,EAAgBjW,KAAK8V,EAAS3N,IAC9B8N,EAAgBjW,KAAK,KACzB,CAER,CACA,OAAOqP,GAAgBb,EAAYC,EAAkBH,OCiNP4H,EDjNqB,ECiNrBA,CAA6B7H,EAAUmH,EAAelK,EAAMgD,MAAQ,IAAMyE,EAAa,IAAMN,QAIvH,OAAOiC,EAAAA,EAAAA,UAASkB,EAA2B,IAG/C,OAAOlB,EAAAA,EAAAA,UAASiB,GAEpB,QACI,OAAO,IAAIpB,EAAAA,WACnB,IAGJ,OAAOG,EAAAA,EAAAA,UAASlB,EACpB,CAvUArU,WAAAA,CAAYgX,GACRC,MAAMD,G,6GAHV/O,CAAAA,KAAAA,WAAAA,GAKIlI,KAAKkI,IAAM+O,EAAiB/O,IAAM+O,EAAiB/O,IAAM,EAC7D,E,uwDC5DG,SAASiP,GAAOC,GACnB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5ClC,EAASoC,IAAeC,EAAAA,GAAAA,UAAyC,KACjEhL,EAAmBiL,IAAyBD,EAAAA,GAAAA,UAAkBnL,EAAMG,oBACpEI,EAAgB8K,IAAsBF,EAAAA,GAAAA,UAAiBnL,EAAMO,iBAC7DH,EAAiBkL,IAAuBH,EAAAA,GAAAA,UAAyCnL,EAAMI,kBACvFzL,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAiB7C,OAZAI,EAAAA,GAAAA,YAAU,KAEN,MAAMC,G,EAAe,YACjB,MAAMnH,SAAgBzI,EAAUC,sBAAsBoP,EAAWnP,MAAMnG,KAAIwR,GAAWvF,GAAoBuF,EAAOpR,KAAMoR,EAAOJ,MAC9HmE,EAAW7G,EACf,E,8NAHqB,I,IAIrBmH,IAAeC,MAAMrD,QAAQzT,MAAM,GAClC,CAACsW,EAAYjL,IAKdA,EAAMC,YAAchB,EACb,mBAACyM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,4BAA2B,WAG3D,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACX,mBAACK,GAAAA,OAAMA,CACHhZ,QAASmN,EACTe,SAAU,KACNkK,GAAsBjL,GACtBe,EAAS,SAAKlB,GAAAA,CAAOG,mBAAoBH,EAAMG,oB,MAK7DA,EAiBE,mBAAC4L,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GACnD,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,SACL/C,MAAOuN,EACPW,SAAWiL,IACPd,EAAkBc,EAAMC,OAAOpZ,MAAM,EAEzCqZ,UAAYF,IAEU,UAAdA,EAAMja,KAGV2O,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,iBAAkBqL,EAAmBpK,EAAUC,EAAUC,EAAW,EAExHmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,iBAAkBqL,EAAmBpK,EAAUC,EAAUC,EAAW,EAExHoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,aAnChB,mBAACT,GAAAA,YAAWA,KACR,mBAACU,GAAAA,YAAWA,CACRzZ,MAAOoN,EACPqC,QAASqG,EACT5H,SAAW2B,IACPyI,EAAmBzI,GACnB3B,EAAS,SAAKlB,GAAAA,CAAOI,gBAAiByC,KACtC1B,GAAY,EAEhB0K,MAAO,GACPW,YAAY,mBA+BpC,C,uICzFO,SAASE,GAAU1B,GACtB,MAAM,SAAE9J,EAAQ,MAAElB,GAAUgL,EACtB2B,GAAiBC,EAAAA,GAAAA,UAAS5M,EAAO6E,KAC/B5E,EAAW4M,IAAiB1B,EAAAA,GAAAA,UAAiBwB,EAAe1M,WAKpE,OACI,mBAACyL,MAAAA,CAAIC,UAAU,WACb,mBAACI,GAAAA,YAAWA,CAACxM,MAAM,aAAauN,WAAY,IAC1C,mBAACC,GAAAA,iBAAgBA,CACbtK,QAASnD,EACTtM,MAAOiN,EACPiB,SAAWiL,I,QACXU,EAAaV,GACbjL,G,yUAAS,IAAKlB,G,WAAAA,CAAOC,UAAWkM,I,sVAKhD,C,+6BCrBO,SAASa,GAAQhC,GACpB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5C5D,EAAU6F,IAAgB9B,EAAAA,GAAAA,UAAyC,KACnErG,EAAoBoI,IAAyB/B,EAAAA,GAAAA,UAAkBnL,EAAM8E,qBACrEE,EAAiBmI,IAAuBhC,EAAAA,GAAAA,UAAiBnL,EAAMgF,kBAC/DD,EAAkBqI,IAAuBjC,EAAAA,GAAAA,UAAyCnL,EAAM+E,mBACxFpQ,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAsB7C,OAjBAI,EAAAA,GAAAA,YAAU,KACN,MAAM8B,G,EAAgB,YAClB,MAAMjG,QAAiB1K,QAAQ2K,IAAI,CAC/BzL,EAAUyB,mBAAmB4N,EAAWnP,KACxCF,EAAUwB,0BAA0B6N,EAAWnP,OAE7CuI,SAAgB3H,QAAQ2K,IAAID,IAC7BE,OACA3R,KAAI4R,GAAY3F,GAAoB2F,EAAQxR,KAAMwR,EAAQR,MAC/DkG,EAAY5I,EAChB,E,8NATsB,I,IAUtBgJ,IAAgB5B,MAAMrD,QAAQzT,MAAM,GACrC,CAACsW,EAAYjL,IAKZA,EAAMC,YAAcf,EACb,mBAACwM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,6BAA4B,YAG5D,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACnB,mBAACmM,MAAAA,CAAIC,UAAU,kBACX,mBAACK,GAAAA,OAAMA,CACPhZ,QAAS8R,EACT5D,SAAU,KACNgM,GAAsBpI,GACtB5D,EAAS,SAAKlB,GAAAA,CAAO8E,oBAAqB9E,EAAM8E,qB,MAKtDA,EAgBE,mBAACiH,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GAC/C,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,UACL/C,MAAOgS,EACP9D,SAAWiL,IACPgB,EAAmBhB,EAAMC,OAAOpZ,MAAM,EAE1CqZ,UAAYF,IAEU,UAAdA,EAAMja,KAGV2O,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,kBAAmBmN,EAAoBlM,EAAUC,EAAUC,EAAW,EAE1HmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,kBAAmBmN,EAAoBlM,EAAUC,EAAUC,EAAW,EAE1HoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,cAnCpB,mBAACT,GAAAA,YAAWA,KACR,mBAACU,GAAAA,YAAWA,CACRzZ,MAAO+R,EACPtC,QAAS2E,EACTlG,SAAW2B,IACPuK,EAAmBvK,GACnB3B,EAAS,SAAKlB,GAAAA,CAAO+E,iBAAkBlC,KACvC1B,GAAY,EAEhB0K,MAAO,GACPW,YAAY,uBA+BpC,C,+6BC3FO,SAASc,GAAmBtC,GAC/B,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,GAAeD,EACvChL,GAAQ4M,EAAAA,GAAAA,UAAS5B,EAAMhL,MAAO6E,KAE5BrE,EAAuB+M,IAA6BpC,EAAAA,GAAAA,UAAkBnL,EAAMQ,wBAC5EC,EAAoB+M,IAA0BrC,EAAAA,GAAAA,UAAiBnL,EAAMS,qBACrEC,EAAqB+M,IAA2BtC,EAAAA,GAAAA,WAAyC,IACzFnL,EAAMU,oBACCV,EAAMU,oBAAoB/K,KAAKkH,IAAuB,CAAC0C,MAAO1C,EAAW7J,MAAO6J,MAEpF,MAEHlI,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAGvCuC,GAAoD,IAA7B,EAAOvN,kBAA8B6B,GAAkChC,EAAMO,eAAgB,CAAC,GAAKsB,GAAyC7B,EAAMI,iBACzK0I,EAAU4E,EAAW5X,OAKrB6X,G,EAA8B,UAAO7M,GACvC,GAAgB,KAAZgI,EAEA,OAAOpM,QAAQC,QAAQ,IAG3B,MAAMiR,QAAoBlR,QAAQ2K,IAAIqG,EAAW/X,KAAIwR,GAC1CvL,EAAUW,+BAA+B4K,EAAQ8D,EAAWnP,KAAK+R,MAAMvR,GACnEA,EAENwR,QAAQjR,GAAsBA,EAAUkR,cAAc7V,SAAS4I,UAGlEkN,SAA6BtR,QAAQ2K,IAAIuG,IAActG,OACvD2G,EAA4B,IAAIC,IAAIF,GAE1C,OAAO1a,MAAMwB,KAAKmZ,EAA0B5J,UACvC8J,OACAxY,KAAKkH,IAAuB,CAAC7J,MAAO6J,EAAW0C,MAAO1C,KAC/D,E,2LAnB2CiE,G,iCAAP,I,IAwBpC,OAAId,EAAMC,YAAchB,EACb,mBAACyM,MAAAA,MAOR,mBAACA,MAAAA,CAAKC,UAAU,WACZ,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,yCAAwC,cAGxE,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACf,mBAACK,GAAAA,OAAMA,CACHhZ,QAASwN,EACTU,SAAU,KACNqM,GAA0B/M,GAC1BU,EAAS,SAAKlB,GAAAA,CAAOQ,uBAAwBR,EAAMQ,wB,MAKjEA,EAmBE,mBAACuL,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GAC/C,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,YACL/C,MAAOyN,EACPS,SAAWiL,IACPqB,EAAsBrB,EAAMC,OAAOpZ,OACnCkO,EAAS,SAAKlB,GAAAA,CAAOS,mBAAoB0L,EAAMC,OAAOpZ,Q,EAE1DqZ,UAAYF,IACU,UAAdA,EAAMja,MAGViP,IACAN,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsBwN,EAAuBvM,EAAUC,EAAUC,GAAW,EAEhImL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsBwN,EAAuBvM,EAAUC,EAAUC,EAAW,EAEhIoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,gBAvCpB,mBAACT,GAAAA,YAAWA,CAACe,WAAY,IACrB,mBAACsB,GAAAA,iBAAgBA,CACblc,IAAK4W,EACL9V,MAAO0N,EACP2N,YAAaV,EACbW,gBAAAA,EACAC,cAAAA,EACArN,SAAW2B,IACP4K,EAAuB5K,GACvB3B,EAAS,SAAKlB,GAAAA,CAAOU,oBAAqBmC,EAAOlN,KAAK2I,GAAoCA,EAAMtL,WAChGmO,GAAY,EAEhB0K,MAAO,GACP2C,iBAAkB,yCAAyC1F,IAC3D2F,kBAAkB,KA+BtC,C,+6BCnHO,SAASC,GAAoB1D,GAChC,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,GAAeD,EACvChL,GAAQ4M,EAAAA,GAAAA,UAAS5B,EAAMhL,MAAO6E,KAE5BI,EAAsB0J,IAA4BxD,EAAAA,GAAAA,UAAkBnL,EAAMiF,uBAC1EE,EAAmByJ,IAAyBzD,EAAAA,GAAAA,UAAiBnL,EAAMmF,oBACnED,EAAoB2J,IAA0B1D,EAAAA,GAAAA,WAAyC,IACvFnL,EAAMkF,mBACClF,EAAMkF,mBAAmBvP,KAAKkH,IAAuB,CAAC0C,MAAO1C,EAAW7J,MAAO6J,MAEnF,MAEHlI,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAGvC2D,GAAuD,IAA9B,EAAOhK,mBAA+B9C,GAAkChC,EAAMgF,gBAAiB,CAAC,GAAKnD,GAAyC7B,EAAM+E,kBAC7KqC,EAAW0H,EAAahZ,OAKxBiZ,G,EAA4B,UAAOjO,GACrC,GAAiB,KAAbsG,EAEA,OAAO1K,QAAQC,QAAQ,IAG3B,MAAMc,QAAmBf,QAAQ2K,IAAIyH,EAAanZ,KAAI4R,GAC3C3L,EAAU0B,0CAA0CiK,EAAS0D,EAAWnP,KAAK+R,MAAMvR,GAC/EA,EAENwR,QAAQjR,GAAsBA,EAAUkR,cAAc7V,SAAS4I,UAGlEpD,SAA8BhB,QAAQ2K,IAAI5J,IAAa6J,OACvD0H,EAA6B,IAAId,IAAIxQ,GAE3C,OAAOpK,MAAMwB,KAAKka,EAA2B3K,UACxC8J,OACAxY,KAAKkH,IAAuB,CAAC7J,MAAO6J,EAAW0C,MAAO1C,KAC/D,E,2LAnByCiE,G,iCAAP,I,IAyBlC,OAAId,EAAMC,YAAcf,EACb,mBAACwM,MAAAA,MAOR,mBAACA,MAAAA,CAAKC,UAAU,WACZ,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,0CAAyC,cAGzE,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACf,mBAACK,GAAAA,OAAMA,CACHhZ,QAASiS,EACT/D,SAAU,KACNyN,GAAyB1J,GACzB/D,EAAS,SAAKlB,GAAAA,CAAOiF,sBAAuBjF,EAAMiF,uB,MAK5DA,EAmBF,mBAAC8G,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GAC/C,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,YACL/C,MAAOmS,EACPjE,SAAWiL,IACPyC,EAAqBzC,EAAMC,OAAOpZ,OAClCkO,EAAS,SAAKlB,GAAAA,CAAOmF,kBAAmBgH,EAAMC,OAAOpZ,Q,EAEzDqZ,UAAYF,IACU,UAAdA,EAAMja,MAGViP,IACAN,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqB4O,EAAsB3N,EAAUC,EAAUC,GAAW,EAE9HmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqB4O,EAAsB3N,EAAUC,EAAUC,EAAW,EAE9HoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,gBAvChB,mBAACT,GAAAA,YAAWA,CAACe,WAAY,IACzB,mBAACsB,GAAAA,iBAAgBA,CACblc,IAAKkV,EACLpU,MAAOkS,EACPmJ,YAAaU,EACbT,gBAAAA,EACAC,cAAAA,EACArN,SAAW2B,IACPgM,EAAsBhM,GACtB3B,EAAS,SAAKlB,GAAAA,CAAOkF,mBAAoBrC,EAAOlN,KAAK2I,GAA4CA,EAAMtL,WACvGmO,GAAY,EAEhB0K,MAAO,GACP2C,iBAAkB,0CAA0CpH,IAC5DqH,kBAAkB,KA+BtC,C,yHCpHO,SAASQ,GAAsBjE,GAClC,MAAM,SAAE9J,EAAQ,WAAEC,GAAe6J,EAC3BhL,GAAQ4M,EAAAA,GAAAA,UAAS5B,EAAMhL,MAAO6E,KAE5BqK,EAASC,IAAehE,EAAAA,GAAAA,UAAkC,CAC9D5L,MAAOS,EAAMW,uBACb3N,MAAOgN,EAAMW,yBAMjB,OAAIX,EAAMC,YAAchB,GAAsBe,EAAMC,YAAcf,GAAyBc,EAAMC,YAAcb,EACpG,mBAACsM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACf,mBAACI,GAAAA,YAAWA,CAACxM,MAAM,0BAA0BuN,WAAY,IACzD,mBAACsC,GAAAA,OAAMA,CACHpc,MAAOkc,EACPzM,QAAShD,EACTyB,SAAU2B,I,QACNsM,EAAWtM,GACX3B,G,yUAAS,IAAKlB,G,WAAAA,CAAOW,uBAAwBkC,EAAO7P,Q,kVACpDmO,GAAY,KAM5B,C,+6BClCO,SAASkO,GAAWrE,GACvB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5CsE,EAAaC,IAAmBpE,EAAAA,GAAAA,UAAyC,KACzE9F,EAAuBmK,IAA6BrE,EAAAA,GAAAA,UAAkBnL,EAAMqF,wBAC5EE,EAAoBkK,IAA0BtE,EAAAA,GAAAA,UAAiBnL,EAAMuF,qBACrED,EAAqBoK,IAA2BvE,EAAAA,GAAAA,UAAyCnL,EAAMsF,sBAC/F3Q,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAsB7C,IAjBAI,EAAAA,GAAAA,YAAU,KACN,MAAMoE,G,EAAmB,YACrB,IAAItL,EAEAA,EADArE,EAAMoF,iBAAmB1F,SACT9D,EAAUC,sBAAsBoP,EAAWnP,MAAMnG,KAAIwR,GAAWvF,GAAoBuF,EAAOpR,KAAMoR,EAAOJ,aAGxGnL,EAAUgC,sBAAsBqN,EAAWnP,MAAMnG,KAAImR,GAAWlF,GAAoBkF,EAAO/Q,KAAM+Q,EAAOC,MAE5HwI,EAAelL,EACnB,E,8NATyB,I,IAUzBsL,IAAmBlE,MAAMrD,QAAQzT,MAAM,GACxC,CAACsW,EAAYjL,IAKZA,EAAMC,YAAcd,EACpB,OAAO,mBAACuM,MAAAA,MAMZ,IAAII,EAASvM,EAAOqQ,EAAmBC,EACvC,OAAO7P,EAAMoF,gBACT,KAAK1F,EACDH,EAAQ,UACRuM,EAAU,2BACV8D,EAAoB,gBACpBC,EAAmB,UACnB,MACJ,KAAKlQ,EACDJ,EAAQ,UACRuM,EAAU,2BACV8D,EAAoB,gBACpBC,EAAmB,UAG3B,OACI,mBAACnE,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAASA,GAC5BvM,GAEP,mBAACwM,GAAAA,YAAWA,CAACxM,MAAM,0BACjB,mBAACmM,MAAAA,CAAIC,UAAU,kBACb,mBAACK,GAAAA,OAAMA,CACLhZ,QAASqS,EACTnE,SAAU,KACNsO,GAA0BnK,GAC1BnE,EAAS,SAAKlB,GAAAA,CAAOqF,uBAAwBrF,EAAMqF,wB,MAK3DA,EAiBA,mBAAC0G,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GACjD,mBAACuX,GAAAA,MAAKA,CACJnW,KAAK,aACL/C,MAAOuS,EACPrE,SAAWiL,IACPsD,EAAsBtD,EAAMC,OAAOpZ,MAAM,EAE7CqZ,UAAYF,IAEU,UAAdA,EAAMja,KAGV2O,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsByP,EAAuBxO,EAAUC,EAAUC,EAAW,EAEhImL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsByP,EAAuBxO,EAAUC,EAAUC,EAAW,EAEhIoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAaqD,KAnCjB,mBAAC9D,GAAAA,YAAWA,KACV,mBAACU,GAAAA,YAAWA,CACVzZ,MAAOsS,EACP7C,QAAS6M,EACTpO,SAAW2B,IACP6M,EAAuB7M,GACvB3B,EAAS,SAAKlB,GAAAA,CAAOsF,oBAAqBzC,KAC1C1B,GAAY,EAEhB0K,MAAO,GACPW,YAAaoD,KA+B7B,C,yHC7GO,SAASE,GAAe9E,GAC3B,MAAM,SAAE9J,EAAQ,MAAElB,GAAUgL,EACtB2B,GAAiBC,EAAAA,GAAAA,UAAS5M,EAAO6E,KAC/BO,EAAgB2K,IAAsB5E,EAAAA,GAAAA,UAAiBwB,EAAevH,gBAK9E,OAAIpF,EAAMC,YAAcd,EACb,mBAACuM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACb,mBAACI,GAAAA,YAAWA,CAACxM,MAAM,cAAcuN,WAAY,IAC3C,mBAACC,GAAAA,iBAAgBA,CACbtK,QAAS7C,GACT5M,MAAOoS,EACPlE,SAAWiL,I,QACP4D,EAAkB5D,GAClBjL,G,yUAAS,IAAKlB,G,WAAAA,CAAOoF,eAAgB+G,I,sVAKzD,C,qzBC5BO,SAAS6D,GAAahF,GACzB,MAAM,SAAE9J,EAAQ,WAAEC,GAAe6J,EAC3BhL,GAAQ4M,EAAAA,GAAAA,UAAS5B,EAAMhL,MAAO6E,KAE5BW,EAAsByK,IAA4B9E,EAAAA,GAAAA,UAAkBnL,EAAMwF,uBAC1EE,EAAmBwK,IAAyB/E,EAAAA,GAAAA,UAAiBnL,EAAM0F,oBACnED,EAAoB0K,IAA0BhF,EAAAA,GAAAA,WAAyC,IACvFnL,EAAMyF,mBACCzF,EAAMyF,mBAAmB9P,KAAIkH,IAAc,CAAC0C,MAAO1C,EAAW7J,MAAO6J,MAEzE,MAEHlI,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAK7C,GAAInL,EAAMC,YAAcd,EACpB,OAAO,mBAACuM,MAAAA,MAMZ,IAAIjJ,EACJ,OAAOzC,EAAMoF,gBACT,KAAK1F,EACD+C,EAAU5C,GACV,MACJ,KAAKF,EACD8C,EAAU3C,GAGlB,OACI,mBAAC4L,MAAAA,CAAKC,UAAU,WACZ,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,oCAAmC,cAGnE,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACf,mBAACK,GAAAA,OAAMA,CACHhZ,QAASwS,EACTtE,SAAU,KACN+O,GAAyBzK,GACzBtE,EAAS,SAAKlB,GAAAA,CAAOwF,sBAAuBxF,EAAMwF,uB,MAKhEA,EAeE,mBAACuG,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GAC/C,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,YACL/C,MAAO0S,EACPxE,SAAWiL,IACP+D,EAAqB/D,EAAMC,OAAOpZ,OAClCkO,EAAS,SAAKlB,GAAAA,CAAO0F,kBAAmByG,EAAMC,OAAOpZ,Q,EAEzDqZ,UAAYF,IACU,UAAdA,EAAMja,MAGViP,IACAN,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqBkQ,EAAsBjP,EAAUC,EAAUC,GAAW,EAE9HmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqBkQ,EAAsBjP,EAAUC,EAAUC,EAAW,EAE9HoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,gBAnCpB,mBAACT,GAAAA,YAAWA,CAACe,WAAY,IACrB,mBAACL,GAAAA,YAAWA,CACRzZ,MAAOyS,EACPhD,QAASA,EACTvB,SAAW2B,IACPsN,EAAsBtN,GACtB3B,EAAS,SAAKlB,GAAAA,CAAOyF,mBAAoB5C,EAAOlN,KAAK2I,GAAoCA,EAAMtL,WAC/FmO,GAAY,EAEhB0K,MAAO,GACP4C,kBAAkB,KA+BtC,C,+6BC3FO,SAAS2B,GAAUpF,GACtB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5CpB,EAAYyG,IAAkBlF,EAAAA,GAAAA,UAAyC,KACvExF,EAAsB2K,IAA4BnF,EAAAA,GAAAA,UAAkBnL,EAAM2F,uBAC1EE,EAAmB0K,IAAyBpF,EAAAA,GAAAA,UAAiBnL,EAAM6F,oBACnED,EAAoB4K,IAA0BrF,EAAAA,GAAAA,UAAyCnL,EAAM4F,qBAC7FjR,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAiB7C,OAZAI,EAAAA,GAAAA,YAAU,KAEN,MAAMkF,G,EAAkB,YACtB,MAAMpM,SAAgBzI,EAAUmC,yBAAyBkN,EAAWnP,MAAMnG,KAAI6R,GAAc5F,GAAoB4F,EAAUzR,KAAMyR,EAAUT,MAC1IsJ,EAAchM,EAChB,E,8NAHwB,I,IAIxBoM,IAAkBhF,MAAMrD,QAAQzT,MAAM,GACvC,CAACsW,EAAYjL,IAKZA,EAAMC,YAAcb,EACb,mBAACsM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,+BAA8B,cAG9D,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACX,mBAACK,GAAAA,OAAMA,CACHhZ,QAAS2S,EACTzE,SAAU,KACNoP,GAAyB3K,GACzBzE,EAAS,SAAKlB,GAAAA,CAAO2F,sBAAuB3F,EAAM2F,uB,MAKhEA,EAiBE,mBAACoG,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GACnD,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,YACL/C,MAAO6S,EACP3E,SAAWiL,IACPoE,EAAqBpE,EAAMC,OAAOpZ,MAAM,EAE5CqZ,UAAYF,IAEU,UAAdA,EAAMja,KAGV2O,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqBuQ,EAAsBtP,EAAUC,EAAUC,EAAW,EAE9HmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqBuQ,EAAsBtP,EAAUC,EAAUC,EAAW,EAE9HoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,gBAnChB,mBAACT,GAAAA,YAAWA,KACR,mBAACU,GAAAA,YAAWA,CACRzZ,MAAO4S,EACPnD,QAASmH,EACT1I,SAAW2B,IACP2N,EAAsB3N,GACtB3B,EAAS,SAAKlB,GAAAA,CAAO4F,mBAAoB/C,KACzC1B,GAAY,EAEhB0K,MAAO,GACPW,YAAY,sBA+BpC,C,+6BCvFO,SAASkE,GAAmB1F,GAC/B,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,GAAeD,EACvChL,GAAQ4M,EAAAA,GAAAA,UAAS5B,EAAMhL,MAAO6E,KAE5BiB,EAAsB6K,IAA4BxF,EAAAA,GAAAA,UAAkBnL,EAAM8F,uBAC1EE,EAAmB4K,IAAyBzF,EAAAA,GAAAA,UAAiBnL,EAAMgG,oBACnED,EAAoB8K,IAA0B1F,EAAAA,GAAAA,WAAyC,IACvFnL,EAAM+F,mBACC/F,EAAM+F,mBAAmBpQ,KAAKkH,IAAuB,CAAC0C,MAAO1C,EAAW7J,MAAO6J,MAEnF,MAEHlI,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IACvCvF,EAAqB5F,EAAM4F,mBAC3BgE,EAAahE,EAAmBjQ,KAAK6R,GAAuCA,EAAUxU,QAAO8C,OAG7Fgb,G,EAAgC,UAAOhQ,GACzC,GAAsC,KAAlC8E,EAAmB/P,WAEnB,OAAO6G,QAAQC,QAAQ,IAG3B,MAAMoU,QAAmBrU,QAAQ2K,IAAIzB,EAAmBjQ,KAAI6R,GACjD5L,EAAUoC,+BAA+BwJ,EAAUxU,MAAQwU,EAAUxU,MAAQ,EAAGiY,EAAWnP,IAAKgF,GAAY+M,MAAMvR,GAC9GA,EAENwR,QAAQjR,GAAsBA,EAAUkR,cAAc7V,SAAS4I,UAGlEkQ,SAA8BtU,QAAQ2K,IAAI0J,IAAazJ,OACvD2J,EAA6B,IAAI/C,IAAI8C,GAE3C,OAAO1d,MAAMwB,KAAKmc,EAA2B5M,UACxC8J,OACAxY,KAAKkH,IAAuB,CAAC7J,MAAO6J,EAAW0C,MAAO1C,KAC/D,E,2LAnB6CiE,G,iCAAP,I,IAwBtC,OAAId,EAAMC,YAAcb,EACb,mBAACsM,MAAAA,MAOR,mBAACA,MAAAA,CAAKC,UAAU,WACZ,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,yCAAwC,cAGxE,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACf,mBAACK,GAAAA,OAAMA,CACHhZ,QAAS8S,EACT5E,SAAU,KACNyP,GAAyB7K,GACzB5E,EAAS,SAAKlB,GAAAA,CAAO8F,sBAAuB9F,EAAM8F,uB,MAKhEA,EAmBE,mBAACiG,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GAC/C,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,YACL/C,MAAOgT,EACP9E,SAAWiL,IACPyE,EAAqBzE,EAAMC,OAAOpZ,OAClCkO,EAAS,SAAKlB,GAAAA,CAAOgG,kBAAmBmG,EAAMC,OAAOpZ,Q,EAEzDqZ,UAAYF,IACU,UAAdA,EAAMja,MAGViP,IACAN,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqB4Q,EAAsB3P,EAAUC,EAAUC,GAAW,EAE9HmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,oBAAqB4Q,EAAsB3P,EAAUC,EAAUC,EAAW,EAE9HoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,gBAvCpB,mBAACT,GAAAA,YAAWA,CAACe,WAAY,IACrB,mBAACsB,GAAAA,iBAAgBA,CACblc,IAAK0X,EACL5W,MAAO+S,EACPsI,YAAayC,EACbxC,gBAAAA,EACAC,cAAAA,EACArN,SAAW2B,IACPgO,EAAsBhO,GACtB3B,EAAS,SAAKlB,GAAAA,CAAO+F,mBAAoBlD,EAAOlN,KAAK2I,GAA4CA,EAAMtL,WACvGmO,GAAY,EAEhB0K,MAAO,GACP2C,iBAAkB,uDAAuD5E,IACzE6E,kBAAkB,KA+BtC,C,+6BChHO,SAASyC,GAAWlG,GACvB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5C9E,EAAqBiL,IAA2BhG,EAAAA,GAAAA,UAAyCnL,EAAMkG,sBAC/F8D,EAAaoH,IAAmBjG,EAAAA,GAAAA,UAAyC,KACzElF,EAAuBoL,IAA6BlG,EAAAA,GAAAA,UAAkBnL,EAAMiG,wBAC5EE,EAAoBmL,IAA0BnG,EAAAA,GAAAA,UAAiBnL,EAAMmG,qBACrExR,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAgB7C,OAXAI,EAAAA,GAAAA,YAAU,KACN,MAAMgG,G,EAAmB,YACvB,MAAMlN,SAAgBzI,EAAU4C,0BAA0ByM,EAAWnP,MAAMnG,KAAI8R,GAAe7F,GAAoB6F,EAAW1R,KAAM0R,EAAWV,MAC9IqK,EAAe/M,EACjB,E,8NAHyB,I,IAIzBkN,IAAmB9F,MAAMrD,QAAQzT,MAAM,GACxC,CAACsW,EAAYjL,IAKZA,EAAMC,YAAcZ,EACb,mBAACqM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,+BAA8B,cAG9D,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACX,mBAACK,GAAAA,OAAMA,CACHhZ,QAASiT,EACT/E,SAAU,KACNmQ,GAA0BpL,GAC1B/E,EAAS,SAAKlB,GAAAA,CAAOiG,uBAAwBjG,EAAMiG,wB,MAKjEA,EAeE,mBAAC8F,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GACnD,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,aACL/C,MAAOmT,EACPjF,SAAWiL,IACPmF,EAAsBnF,EAAMC,OAAOpZ,MAAM,EAE7CqZ,UAAYF,IAEU,UAAdA,EAAMja,KAGV2O,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsBsR,EAAuBrQ,EAAUC,EAAUC,EAAW,EAEhImL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsBsR,EAAuBrQ,EAAUC,EAAUC,EAAW,EAEhIoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,iBAlChB,mBAACT,GAAAA,YAAWA,KACR,mBAACU,GAAAA,YAAWA,CACRD,YAAY,oBACZxZ,MAAOkT,EACPzD,QAASuH,EACT6B,MAAO,GACP3K,SAAW2B,IACPsO,EAAuBtO,GACvB3B,EAAS,SAAKlB,GAAAA,CAAOkG,oBAAqBrD,KAC1C1B,GAAY,KA+BxC,C,+6BCtFO,SAASqQ,GAAWxG,GACvB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5C3E,EAAqBoL,IAA2BtG,EAAAA,GAAAA,UAAyCnL,EAAMqG,sBAC/FD,EAAuBsL,IAA6BvG,EAAAA,GAAAA,UAAkBnL,EAAMoG,wBAC5EE,EAAoBqL,IAA0BxG,EAAAA,GAAAA,UAAiBnL,EAAMsG,qBACrE3R,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAIvCnB,IADqD,IAAjC,EAAO/D,sBAAkCjE,GAAkChC,EAAMmG,mBAAoB,CAAC,GAAKtE,GAAyC7B,EAAMkG,sBACxJpQ,OAEtB8b,G,EAAkB,UAAO9Q,GAC3B,GAAoB,KAAhBkJ,EAEA,OAAOtN,QAAQC,QAAQ,IAE3B,MAAMsN,SAAqBvN,QAAQ2K,IAAIrH,EAAMkG,oBAAoBvQ,KAAI8R,GAC1D7L,EAAU6C,uCAAuCgJ,EAAWzU,MAAQyU,EAAWzU,MAAQ,EAAGiY,EAAWnP,KAC3F+R,MAAMvR,GAA4BA,EAAOwR,QAAO3G,GAAWA,EAAOpR,KAAKgY,cAAc7V,SAAS4I,WAC1GwG,OACT,OAAOhU,MAAMwB,KAAK,IAAIoZ,IAAIjE,GAAa5F,UAClC8J,OACAxY,KAAIwR,GAAWvF,GAAoBuF,EAAOpR,KAAMoR,EAAOJ,KAChE,E,2LAZ+BjG,G,iCAAP,I,IAiBxB,OAAId,EAAMC,YAAcZ,EACb,mBAACqM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,kCAAiC,UAGjE,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACX,mBAACK,GAAAA,OAAMA,CACHhZ,QAASoT,EACTlF,SAAU,KACNwQ,GAA0BtL,GAC1BlF,EAAS,SAAKlB,GAAAA,CAAOoG,uBAAwBpG,EAAMoG,wB,MAKjEA,EAkBE,mBAAC2F,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GACnD,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,aACL/C,MAAOsT,EACPpF,SAAWiL,IACPwF,EAAsBxF,EAAMC,OAAOpZ,MAAM,EAE7CqZ,UAAYF,IAEU,UAAdA,EAAMja,KAGV2O,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsB2R,EAAuB1Q,EAAUC,EAAUC,EAAW,EAEhImL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,qBAAsB2R,EAAuB1Q,EAAUC,EAAUC,EAAW,EAEhIoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,iBArChB,mBAACT,GAAAA,YAAWA,KACR,mBAACqC,GAAAA,iBAAgBA,CACblc,IAAK8X,EACLhX,MAAOqT,EACPgI,YAAauD,EACb1Q,SAAW2B,IACP4O,EAAuB5O,GACvB3B,EAAS,SAAKlB,GAAAA,CAAOqG,oBAAqBxD,KAC1C1B,GAAY,EAEhBmN,gBAAAA,EACAC,cAAAA,EACA1C,MAAO,GACPW,YAAY,MA+BpC,C,+6BC/FO,SAASqF,GAAkB7G,GAC9B,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,GAC5CzE,EAAqBuL,IAA2B3G,EAAAA,GAAAA,UAAkBnL,EAAMuG,sBACxEE,EAAkBsL,IAAwB5G,EAAAA,GAAAA,UAAiBnL,EAAMyG,mBACjED,EAAmBwL,IAAyB7G,EAAAA,GAAAA,WAAyC,IACrFnL,EAAMwG,kBACCxG,EAAMwG,kBAAkB7Q,KAAKkH,IAAuB,CAAC0C,MAAO1C,EAAW7J,MAAO6J,MAElF,MAEHlI,EAAOsM,IAAakK,EAAAA,GAAAA,UAAiB,IAGvC8G,GAAqD,IAAjC,EAAOhM,sBAAkCjE,GAAkChC,EAAMmG,mBAAoB,CAAC,GAAKtE,GAAyC7B,EAAMkG,qBAC9K8D,EAAciI,EAAQnc,OAGtBoc,G,EAA+B,UAAOpR,GACxC,GAAoB,KAAhBkJ,EAEA,OAAOtN,QAAQC,QAAQ,IAE3B,MAAMuN,SAAuBxN,QAAQ2K,IAAI4K,EAAQtc,KAAI8R,GAC1C7L,EAAU+C,8BAA8B8I,EAAYwD,EAAWnP,KACrD+R,MAAMvR,GAAsBA,EAAOwR,QAAQjR,GAAsBA,EAAUkR,cAAc7V,SAAS4I,WAC9GwG,OACT,OAAOhU,MAAMwB,KAAK,IAAIoZ,IAAIhE,GAAe7F,UACpC8J,OACAxY,KAAKkH,IAAuB,CAAC7J,MAAO6J,EAAW0C,MAAO1C,KAC/D,E,2LAZ4CiE,G,iCAAP,I,IAiBrC,OAAId,EAAMC,YAAcZ,EACb,mBAACqM,MAAAA,MAOR,mBAACA,MAAAA,CAAIC,UAAU,WACX,mBAACC,GAAAA,YAAWA,CAACC,MAAO,GAAIC,QAAQ,wCAAuC,cAGvE,mBAACC,GAAAA,YAAWA,CAACxM,MAAM,0BACf,mBAACmM,MAAAA,CAAIC,UAAU,kBACf,mBAACK,GAAAA,OAAMA,CACHhZ,QAASuT,EACTrF,SAAU,KACN4Q,GAAwBvL,GACxBrF,EAAS,SAAKlB,GAAAA,CAAOuG,qBAAsBvG,EAAMuG,sB,MAK3DA,EAoBE,mBAACwF,GAAAA,YAAWA,CAACE,UAAStX,EAAsBA,MAAOA,GACnD,mBAACuX,GAAAA,MAAKA,CACFnW,KAAK,YACL/C,MAAOyT,EACPvF,SAAWiL,IACP4F,EAAoB5F,EAAMC,OAAOpZ,OACjCkO,EAAS,SAAKlB,GAAAA,CAAOyG,iBAAkB0F,EAAMC,OAAOpZ,Q,EAExDqZ,UAAYF,IACU,UAAdA,EAAMja,MAGViP,IACAN,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,mBAAoB+R,EAAqB9Q,EAAUC,EAAUC,GAAW,EAE5HmL,OAASH,IACLtL,GAAqBsL,EAAMC,OAAOpZ,MAAOgN,EAAO,mBAAoB+R,EAAqB9Q,EAAUC,EAAUC,EAAW,EAE5HoL,UAAAA,EACApI,KAAK,OACL0H,MAAO,GACPW,YAAY,gBAxChB,mBAACT,GAAAA,YAAWA,CAACe,WAAY,IACrB,mBAACsB,GAAAA,iBAAgBA,CACblc,IAAK8X,EACLhX,MAAOwT,EACP6H,YAAa6D,EACb5D,gBAAAA,EACAC,cAAAA,EACArN,SAAW2B,IACPmP,EAAqBnP,GACrB3B,EAAS,SAAKlB,GAAAA,CAAOwG,kBAAmB3D,EAAOlN,KAAK2I,GAAoCA,EAAMtL,WAC9FmO,GAAY,EAEhB0K,MAAO,GACP2C,iBAAkB,6CAA6CxE,IAC/DyE,kBAAkB,EAClBjC,YAAY,MA+BpC,CC5GO,MAAM2F,GAAS,IAAIC,EAAAA,iBAA2D1L,IAClF2L,iBCAI,SAAsBrH,GAC3B,MAAM,gBAAEsH,EAAe,QAAE7P,GAAYuI,GA0B/B,iBAAEuH,GAAqB9P,EACvB+P,EAAkB/P,EAAQ+P,gBAAkB,CAAC,EAEnD,OACE,mBAAC9G,MAAAA,CAAIC,UAAU,iBACb,mBAACI,GAAAA,YAAWA,CAACxM,MAAM,eAAeuN,WAAY,IAC5C,mBAAC2F,GAAAA,YAAWA,CACVC,aAAeH,GAAoBA,EAAiBI,OACpD3f,MAAOwf,EAAeG,QAAU,GAChCnG,YAAY,+BACZX,MAAO,GACP+G,QAzBc,KACpBN,EAAgB,SACX7P,GAAAA,CACH8P,iBAAkB,SACb9P,EAAQ8P,kBAAgB,CAC3BI,QAAQ,IAEVH,eAAgB,SACX/P,EAAQ+P,gBAAc,CACzBG,OAAQ,O,EAiBNzR,SAnCgBiL,IACtBmG,EAAgB,SACX7P,GAAAA,CACH+P,eAAgB,CACdG,OAAQxG,EAAMC,OAAOpZ,S,KAoC7B,ID3CG6f,gBEYI,SAAqB7H,GACxB,MAAM,SAAE9J,EAAQ,WAAEC,EAAU,WAAE8J,EAAU,MAAEjL,GAAUgL,EAMpD,OALmD,IAA/CjL,GAAoCC,IAEpCkB,EAASlB,GAIT,sCACI,mBAAC0M,GAASA,CAACzB,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACnF,mBAAC6J,GAAMA,CAACE,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IAChF,mBAACoM,GAAkBA,CAACrC,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IAC5F,mBAAC8L,GAAOA,CAAC/B,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACjF,mBAACwN,GAAmBA,CAACzD,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IAC7F,mBAACkP,GAASA,CAACnF,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACnF,mBAACwP,GAAkBA,CAACzF,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IAC5F,mBAAC+N,GAAqBA,CAAChE,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IAC/F,mBAAC4O,GAAcA,CAAC7E,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACxF,mBAACmO,GAAUA,CAACpE,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACpF,mBAAC8O,GAAYA,CAAC/E,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACtF,mBAACgQ,GAAUA,CAACjG,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACpF,mBAACsQ,GAAUA,CAACvG,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IACpF,mBAAC2Q,GAAiBA,CAAC5G,WAAYA,EAAYjL,MAAOA,EAAOmB,WAAYA,EAAYD,SAAUA,IAGvG,G","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///../node_modules/rxjs/dist/esm5/internal/util/isFunction.js","webpack:///../node_modules/tslib/tslib.es6.mjs","webpack:///../node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js","webpack:///../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js","webpack:///../node_modules/rxjs/dist/esm5/internal/util/arrRemove.js","webpack:///../node_modules/rxjs/dist/esm5/internal/Subscription.js","webpack:///../node_modules/rxjs/dist/esm5/internal/config.js","webpack:///../node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js","webpack:///../node_modules/rxjs/dist/esm5/internal/util/noop.js","webpack:///../node_modules/rxjs/dist/esm5/internal/NotificationFactories.js","webpack:///../node_modules/rxjs/dist/esm5/internal/util/errorContext.js","webpack:///../node_modules/rxjs/dist/esm5/internal/Subscriber.js","webpack:///../node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js","webpack:///../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js","webpack:///../node_modules/rxjs/dist/esm5/internal/operators/map.js","webpack:///../node_modules/rxjs/dist/esm5/internal/util/lift.js","webpack:///./flespi-sdk.ts","webpack:///./constants.ts","webpack:///./utils.ts","webpack:///./datasource.ts","webpack:///./components/QueryEditorDeviceComponent.tsx","webpack:///./components/QueryEditorQueryTypeComponent.tsx","webpack:///./components/QueryEditorAccountComponent.tsx","webpack:///./components/QueryEditorTelemParamComponent.tsx","webpack:///./components/QueryEditorStatParamComponent.tsx","webpack:///./components/QueryEditorGenFuncComponent.tsx","webpack:///./components/QueryEditorLogsSourceComponent.tsx","webpack:///./components/QueryEditorLogsSourceTypeComponent.tsx","webpack:///./components/QueryEditorLogParamComponent.tsx","webpack:///./components/QueryEditorContainerComponent.tsx","webpack:///./components/QueryEditorContParamComponent.tsx","webpack:///./components/QueryEditorCalculatorComponent.tsx","webpack:///./components/QueryEditorCalcDeviceComponent.tsx","webpack:///./components/QueryEditorIntParamComponent.tsx","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export function isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n};\n","import { createErrorClass } from './createErrorClass';\nexport var UnsubscriptionError = createErrorClass(function (_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors\n            ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ')\n            : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n    };\n});\n//# sourceMappingURL=UnsubscriptionError.js.map","export function createErrorClass(createImpl) {\n    var _super = function (instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n//# sourceMappingURL=createErrorClass.js.map","export function arrRemove(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=arrRemove.js.map","import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = (function () {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) {\n                    try {\n                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n                            var parent_1 = _parentage_1_1.value;\n                            parent_1.remove(this);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    _parentage.remove(this);\n                }\n            }\n            var initialFinalizer = this.initialTeardown;\n            if (isFunction(initialFinalizer)) {\n                try {\n                    initialFinalizer();\n                }\n                catch (e) {\n                    errors = e instanceof UnsubscriptionError ? e.errors : [e];\n                }\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            execFinalizer(finalizer);\n                        }\n                        catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof UnsubscriptionError) {\n                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            if (errors) {\n                throw new UnsubscriptionError(errors);\n            }\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) {\n                execFinalizer(teardown);\n            }\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) {\n                        return;\n                    }\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function (parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    };\n    Subscription.prototype._removeParent = function (parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) {\n            this._parentage = null;\n        }\n        else if (Array.isArray(_parentage)) {\n            arrRemove(_parentage, parent);\n        }\n    };\n    Subscription.prototype.remove = function (teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && arrRemove(_finalizers, teardown);\n        if (teardown instanceof Subscription) {\n            teardown._removeParent(this);\n        }\n    };\n    Subscription.EMPTY = (function () {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    })();\n    return Subscription;\n}());\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n    return (value instanceof Subscription ||\n        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));\n}\nfunction execFinalizer(finalizer) {\n    if (isFunction(finalizer)) {\n        finalizer();\n    }\n    else {\n        finalizer.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscription.js.map","export var config = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false,\n};\n//# sourceMappingURL=config.js.map","import { __read, __spreadArray } from \"tslib\";\nexport var timeoutProvider = {\n    setTimeout: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = timeoutProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {\n            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));\n        }\n        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));\n    },\n    clearTimeout: function (handle) {\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=timeoutProvider.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","export var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\nexport function errorNotification(error) {\n    return createNotification('E', undefined, error);\n}\nexport function nextNotification(value) {\n    return createNotification('N', value, undefined);\n}\nexport function createNotification(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error,\n    };\n}\n//# sourceMappingURL=NotificationFactories.js.map","import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !context;\n        if (isRoot) {\n            context = { errorThrown: false, error: null };\n        }\n        cb();\n        if (isRoot) {\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\n            context = null;\n            if (errorThrown) {\n                throw error;\n            }\n        }\n    }\n    else {\n        cb();\n    }\n}\nexport function captureError(err) {\n    if (config.useDeprecatedSynchronousErrorHandling && context) {\n        context.errorThrown = true;\n        context.error = err;\n    }\n}\n//# sourceMappingURL=errorContext.js.map","import { __extends } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if (isSubscription(destination)) {\n                destination.add(_this);\n            }\n        }\n        else {\n            _this.destination = EMPTY_OBSERVER;\n        }\n        return _this;\n    }\n    Subscriber.create = function (next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    };\n    Subscriber.prototype.next = function (value) {\n        if (this.isStopped) {\n            handleStoppedNotification(nextNotification(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (this.isStopped) {\n            handleStoppedNotification(errorNotification(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (this.isStopped) {\n            handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function () {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n    return _bind.call(fn, thisArg);\n}\nvar ConsumerObserver = (function () {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function (value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) {\n            try {\n                partialObserver.next(value);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    ConsumerObserver.prototype.error = function (err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) {\n            try {\n                partialObserver.error(err);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n        else {\n            handleUnhandledError(err);\n        }\n    };\n    ConsumerObserver.prototype.complete = function () {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) {\n            try {\n                partialObserver.complete();\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    return ConsumerObserver;\n}());\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if (isFunction(observerOrNext) || !observerOrNext) {\n            partialObserver = {\n                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),\n                error: error !== null && error !== void 0 ? error : undefined,\n                complete: complete !== null && complete !== void 0 ? complete : undefined,\n            };\n        }\n        else {\n            var context_1;\n            if (_this && config.useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\n                partialObserver = {\n                    next: observerOrNext.next && bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),\n                };\n            }\n            else {\n                partialObserver = observerOrNext;\n            }\n        }\n        _this.destination = new ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\nfunction handleUnhandledError(error) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(error);\n    }\n    else {\n        reportUnhandledError(error);\n    }\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = config.onStoppedNotification;\n    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\n}\nexport var EMPTY_OBSERVER = {\n    closed: true,\n    next: noop,\n    error: defaultErrorHandler,\n    complete: noop,\n};\n//# sourceMappingURL=Subscriber.js.map","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n    timeoutProvider.setTimeout(function () {\n        var onUnhandledError = config.onUnhandledError;\n        if (onUnhandledError) {\n            onUnhandledError(err);\n        }\n        else {\n            throw err;\n        }\n    });\n}\n//# sourceMappingURL=reportUnhandledError.js.map","import { __extends } from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nvar OperatorSubscriber = (function (_super) {\n    __extends(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this.shouldUnsubscribe = shouldUnsubscribe;\n        _this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : _super.prototype._next;\n        _this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._error;\n        _this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function () {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var closed_1 = this.closed;\n            _super.prototype.unsubscribe.call(this);\n            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    };\n    return OperatorSubscriber;\n}(Subscriber));\nexport { OperatorSubscriber };\n//# sourceMappingURL=OperatorSubscriber.js.map","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n//# sourceMappingURL=map.js.map","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return function (source) {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n//# sourceMappingURL=lift.js.map","import { DataQueryResponse } from \"@grafana/data\";\nimport { FetchResponse, getBackendSrv } from \"@grafana/runtime\";\nimport { Observable, lastValueFrom } from \"rxjs\";\n\n// interfaces that describe data structure of flespi entities\nexport interface FlespiDeviceTelemetryResponse {\n    result: FlespiDeviceTelemetry[],\n}\n\nexport interface FlespiDeviceTelemetry {\n    id: number,\n    telemetry: {\n        [key: string]: {\n            ts: number,\n            value: any,\n        }\n    },\n}\n\nexport interface FlespiCustomerStatisticsResponse {\n    result: FlespiCustomerStatistics[],\n}\n\nexport interface FlespiCustomerStatistics {\n    cid: number,\n    [key: string]: any,\n}\n\nexport interface FlespiAnalyticsIntervalsResponse {\n    result: FlespiAnalyticsInterval[],\n}\n\nexport interface FlespiAnalyticsInterval {\n    begin: number,\n    end: number,\n    id: number,\n    [key: string]: any,\n}\n\nexport interface FlespiEntytiesResponse {\n    result: FlespiEntity[],\n}\n\nexport interface FlespiEntity {\n    id: number,\n    name: string,\n}\n\nexport class FlespiSDK {\n    static routePath = '/flespi';\n\n    // fetch all flespi devices available for the configured token\n    // GET gw/devices/all\n    // returns array of devices:     \n    // [{\"id\": 395457, \"name\": \"my device1\"}, {\"id\": 1543533, \"name\": \"my device2\"}]\n    static async fetchAllFlespiDevices(url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + '/gw/devices/all?fields=id%2Cname',\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    }\n\n    // fetch telemetry parameters of the given device by Id\n    // GET gw/devices/<device_id>/telemetry/all\n    // returns JS array of telemetry parameters' names\n    static async fetchDeviceTelemetryParameters(deviceId: string, url: string): Promise<string[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiDeviceTelemetryResponse>({\n            url: url + this.routePath + `/gw/devices/${deviceId}/telemetry/all`,\n            method: 'GET',\n        })\n        const response = await lastValueFrom(observableResponse);\n        const telemetry = response.data.result[0].telemetry;\n        if ( telemetry === null ) {\n            return Promise.resolve([]);\n        }\n        const devicesTelemetryParameters = [];\n        for ( const parameter in telemetry ) {\n            devicesTelemetryParameters.push(parameter);\n        }\n\n        return devicesTelemetryParameters;\n    }\n\n    // fetch message of given device by Id\n    // GET gw/devices/messages\n    // returns observable fetch response with data\n    static fetchFlespiDevicesMessages(deviceId: string, parameters: string[], url: string, from: number, to: number, genFunction?: string, genInterval?: number): Observable<FetchResponse<DataQueryResponse>> {    \n        // prepare request parameters\n        let requestParameters = `{\"from\":${from},\"to\":${to}`;                                   // {\"from\":FROM,\"to\":TO\n        if (genFunction !== undefined && (genFunction === 'average' || genFunction === 'minimum' || genFunction === 'maximum') \n            && genInterval !== undefined && genInterval >= 10) {\n            requestParameters += `,\"generalize\":${genInterval},\"method\":\"${genFunction}\"`;      // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\"\n        }\n        requestParameters += `,\"fields\":\"`;         // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"\n        requestParameters += parameters.join(',');  // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"param1,param2\n        requestParameters += `,timestamp\"}`;        // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"param1,param2,timestamp\"}\n\n        // execute request and return observable fetch responses\n        return getBackendSrv().fetch<DataQueryResponse> ({        \n            url: url + this.routePath + `/gw/devices/${deviceId}/messages?data=${requestParameters}`,\n            method: 'GET',\n        })\n    }\n\n    // fetch logs of given device by Id\n    // GET gw/devices/logs\n    // returns observable fetch response with data\n    static fetchFlespiDevicesLogs(deviceId: string, parameters: string[], url: string, from: number, to: number): Observable<FetchResponse<DataQueryResponse>> {    \n        // prepare request parameters\n        let requestParameters = `{\"from\":${from},\"to\":${to}`;   // {\"from\":FROM,\"to\":TO\n        requestParameters += `,\"fields\":\"`;                     // {\"from\":FROM,\"to\":TO,\"fields\":\"\n        requestParameters += parameters.join(',');              // {\"from\":FROM,\"to\":TO,\"fields\":\"param1,param2\n        requestParameters += `,timestamp\"}`;                    // {\"from\":FROM,\"to\":TO,\"fields\":\"param1,param2,timestamp\"}\n\n        // execute request and return observable fetch responses\n        return getBackendSrv().fetch<DataQueryResponse> ({        \n            url: url + this.routePath + `/gw/devices/${deviceId}/logs?data=${requestParameters}`,\n            method: 'GET',\n        })\n    }\n\n    // fetch subaccounts available for the configured token\n    // GET platform/subaccounts/all\n    // returns array of subaccounts\n    // [{\"id\":13704,\"name\":\"my subaccount1\"},{\"id\":13705,\"name\":\"my subaccount2\"}]\n    static async fetchAllFlespiSubaccounts(url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + '/platform/subaccounts/all?fields=id%2Cname',\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    }\n\n    // fetch current flespi account of the configured token\n    // GET platform/customer\n    // returns array with account\n    // [{\"id\":51,\"name\":\"My Flespi Account\"}]\n    static async fetchFlespiAccount(url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + '/platform/customer?fields=id%2Cname',\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    }\n\n    // fetch possible statistics parameters for given account by Id\n    // GET platform/customer/statistics with header 'x-flespi-cid: <account_id>'\n    // returns JS array of statistics parameters' names\n    static async fetchFlespiStatisticsParametersForAccount(accountId: string, url: string): Promise<string[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiCustomerStatisticsResponse>({\n            url: url + this.routePath + '/platform/customer/statistics?data=%7B%22reverse%22%3Atrue%2C%22count%22%3A1%7D',\n            method: 'GET',\n            headers: {\n                'x-flespi-cid': accountId,\n            },\n        });\n        const response = await lastValueFrom(observableResponse);\n        const statistics = response.data.result[0];\n        if ( statistics === null ) {\n            return Promise.resolve([]);\n        }\n        const statisticsParameters = [];\n        for ( const parameter in statistics ) {\n            statisticsParameters.push(parameter);\n        }\n\n        return statisticsParameters;\n    }\n\n    // fetch statistics for given account by Id\n    // GET platform/customer/statistics\n    // returns observable fetch response with data\n    static fetchFlespiAccountsStatistics(accountId: string, parameters: string[], url: string, from: number, to: number, genFunction?: string, genInterval?: number): Observable<FetchResponse<DataQueryResponse>> {    \n        // prepare request parameters\n        let requestParameters = `{\"from\":${from},\"to\":${to}`;                                   // {\"from\":FROM,\"to\":TO\n        if (genFunction !== undefined && (genFunction === 'average' || genFunction === 'minimum' || genFunction === 'maximum') \n            && genInterval !== undefined && genInterval >= 10) {\n            requestParameters += `,\"generalize\":${genInterval},\"method\":\"${genFunction}\"`;      // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\"\n        }\n        requestParameters += `,\"fields\":\"`;         // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"\n        requestParameters += parameters.join(',');  // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"param1,param2\n        requestParameters += `,timestamp\"}`;        // {\"from\":FROM,\"to\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"param1,param2,timestamp\"}\n\n        // execute request and return observable fetch responses\n        return getBackendSrv().fetch<DataQueryResponse> ({        \n            url: url + this.routePath + `/platform/customer/statistics?data=${requestParameters}`,\n            method: 'GET',\n            headers: {\n                'x-flespi-cid': accountId,\n            },\n        })\n    }\n\n    // fetch all flespi streams available for the configured token\n    // GET gw/streams/all\n    // returns array of devices:     \n    // [{\"id\": 395457, \"name\": \"my stream1\"}, {\"id\": 1543533, \"name\": \"my stream2\"}]\n    static async fetchAllFlespiStreams(url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + '/gw/streams/all?fields=id%2Cname',\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    }  \n    \n    // fetch logs of given stream by Id\n    // GET gw/streams/logs\n    // returns observable fetch response with data\n    static fetchFlespiStreamsLogs(streamId: string, parameters: string[], url: string, from: number, to: number): Observable<FetchResponse<DataQueryResponse>> {    \n        // prepare request parameters\n        let requestParameters = `{\"from\":${from},\"to\":${to}`;   // {\"from\":FROM,\"to\":TO\n        requestParameters += `,\"fields\":\"`;                     // {\"from\":FROM,\"to\":TO,\"fields\":\"\n        requestParameters += parameters.join(',');              // {\"from\":FROM,\"to\":TO,\"fields\":\"param1,param2\n        requestParameters += `,timestamp\"}`;                    // {\"from\":FROM,\"to\":TO,\"fields\":\"param1,param2,timestamp\"}\n\n        // execute request and return observable fetch responses\n        return getBackendSrv().fetch<DataQueryResponse> ({        \n            url: url + this.routePath + `/gw/streams/${streamId}/logs?data=${requestParameters}`,\n            method: 'GET',\n        })\n    }\n\n    // fetch all flespi containers available for the configured token\n    // GET storage/containers/all\n    // returns array of containers:     \n    // [{\"id\": 395457, \"name\": \"my container1\"}, {\"id\": 1543533, \"name\": \"my container2\"}]\n    static async fetchAllFlespiContainers(url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + '/storage/containers/all?fields=id%2Cname',\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    } \n\n    // fetch possible parameters of container given by Id\n    // GET storage/containers/messages\n    // returns JS array of parameters' names\n    static async fetchFlespiContainerParameters(containerId: number, url: string, parameterMask: string): Promise<string[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiCustomerStatisticsResponse>({\n            url: url + this.routePath + `/storage/containers/${containerId}/messages?data={\"max_count\":1,\"reverse\":true,\"fields\":\"${parameterMask}\"}`,\n            method: 'GET',\n        });\n        const response = await lastValueFrom(observableResponse);\n        const params = response.data.result[0].params;\n        if (params === null) {\n            return Promise.resolve([]);\n        }\n        const containerParameters: string[] = [];\n        Object.keys(params).map(param => {\n            containerParameters.push(param);\n        });\n        \n        return containerParameters;\n    } \n\n    // fetch messages of given container by Id\n    // GET storage/containers/messages\n    // returns observable fetch response with data\n    static fetchFlespiContainersMessages(containerId: string, parameters: string[], url: string, from: number, to: number, genFunction?: string, genInterval?: number): Observable<FetchResponse<DataQueryResponse>> {    \n        // prepare request parameters\n        let requestParameters = `{\"left_key\":${from},\"right_key\":${to}`;    // {\"left_key\":FROM,\"right_key\":TO\n        if (genFunction !== undefined && (genFunction === 'average' || genFunction === 'minimum' || genFunction === 'maximum') \n            && genInterval !== undefined && genInterval >= 10) {\n            requestParameters += `,\"generalize\":${genInterval},\"method\":\"${genFunction}\"`;      // {\"left_key\":FROM,\"right_key\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\"\n        }\n        requestParameters += `,\"fields\":\"`;         // {\"left_key\":FROM,\"right_key\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"\n        requestParameters += parameters.join(',');  // {\"left_key\":FROM,\"right_key\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"param1,param2\n        requestParameters += `,timestamp\"}`;        // {\"left_key\":FROM,\"right_key\":TO,\"generalize\":GEN_INTERVAL,\"method\":\"GEN_FUNC\",\"fields\":\"param1,param2,timestamp\"}\n\n        // execute request and return observable fetch responses\n        return getBackendSrv().fetch<DataQueryResponse> ({        \n            url: url + this.routePath + `/storage/containers/${containerId}/messages?data=${requestParameters}`,\n            method: 'GET',\n        })\n    }\n\n    // fetch all flespi calculators available for the configured token\n    // GET gw/calcs/all\n    // returns array of calculators:     \n    // [{\"id\": 395457, \"name\": \"my calc1\"}, {\"id\": 1543533, \"name\": \"my calc2\"}]\n    static async fetchAllFlespiCalculators(url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + '/gw/calcs/all?fields=id%2Cname',\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    }\n\n    // fetch flespi devices assigned to calculator by Id\n    // GET gw/devices/calcs.id=<CALC_ID>\n    // returns arrau of devices assigned to the given calculator:\n    // [{\"id\": 395457, \"name\": \"my calcdevice1\"}, {\"id\": 1543533, \"name\": \"my calcdevice2\"}]\n    static async fetchFlespiDevicesAssignedToCalculator(calcId: number, url: string): Promise<FlespiEntity[]> {\n        const observableResponse = getBackendSrv().fetch<FlespiEntytiesResponse>({\n            url: url + this.routePath + `/gw/devices/calcs.id=${calcId}?fields=id%2Cname`,\n            method: 'GET',\n        });\n\n        const response = await lastValueFrom(observableResponse);\n        return response.data.result;\n    }\n\n    // fetch possible interval parameters (aka counters) of given calculator by Id\n    // GET gw/calcs/devices/intervals/last\n    // returns JS array of parameters' names\n    static async fetchFlespiIntervalParameters(calcId: string, url: string): Promise<string[]> {\n        const observableResponse =  getBackendSrv().fetch<FlespiAnalyticsIntervalsResponse>({\n            url: url + this.routePath + `/gw/calcs/${calcId}/devices/all/intervals/last`,\n            method: 'GET',\n        });\n        const response = await lastValueFrom(observableResponse);\n        const params = response.data.result[0];\n        if (params === null) {\n            return Promise.resolve([]);\n        }\n        const containerParameters: string[] = [];\n        Object.keys(params).map(param => {\n            containerParameters.push(param);\n        });\n        \n        return containerParameters;    \n    }\n\n    // fetch intervals of given calculator and device by Ids\n    // GET gw/calcs/devices/intervals\n    // returns observable fetch response with data\n    static fetchFlespiIntervals(calcId: string, deviceId: string, parameters: string[], url: string, from: number, to: number): Observable<FetchResponse<FlespiAnalyticsIntervalsResponse>> {\n        let requestParameters = `{\"begin\":${from},\"end\":${to}`;\n        requestParameters += `,\"fields\":\"`;\n        requestParameters += parameters.join(',');\n        requestParameters += `,begin,end\"}`;\n\n        return getBackendSrv().fetch<FlespiAnalyticsIntervalsResponse>({\n            url: url + this.routePath + `/gw/calcs/${calcId}/devices/${deviceId}/intervals/all?data=${requestParameters}`,\n            method: 'GET',\n        });\n    } \n}\n","import { SelectableValue } from \"@grafana/data\";\nimport { MyQuery } from \"types\";\n\nexport const REGEX_DEVICES = /^(devices\\.\\*)|^(devices\\.(\\d+)\\.parameters\\.\\*)/;\nexport const REGEX_ACCOUNTS = /^(accounts\\.\\*)|(accounts\\.([\\d,]+)\\.statistics\\.\\*)/;\nexport const VARIABLES_QUERY_STREAMS = 'streams.*';\nexport const REGEX_CONTAINERS = /^(containers\\.\\*)|(containers\\.([\\d,]+)\\.parameters\\.\\*)/;\nexport const REGEX_CALCULATORS = /^(calculators\\.\\*)|(calculators\\.([\\d,]+)\\.devices\\.\\*)|(calculators\\.([\\d,]+)\\.devices\\.([\\d,]+).parameters\\.\\*)/;\n\nexport const QUERY_TYPE_DEVICES = 'devices';\nexport const QUERY_TYPE_STATISTICS = 'statistics';\nexport const QUERY_TYPE_LOGS = 'logs';\nexport const QUERY_TYPE_CONTAINERS = 'containers';\nexport const QUERY_TYPE_INTERVALS = 'intervals';\n\nexport const QUERY_TYPE_OPTIONS: Array<SelectableValue<string>> = [\n    { label: 'Devices', value: QUERY_TYPE_DEVICES },\n    { label: 'Statistics', value: QUERY_TYPE_STATISTICS },\n    { label: 'Logs', value: QUERY_TYPE_LOGS },\n    { label: 'Intervals', value: QUERY_TYPE_INTERVALS },\n    { label: 'Containers', value: QUERY_TYPE_CONTAINERS },\n];\n\nexport const GEN_FUNC_AVERAGE = 'average';\n\nexport const GEN_FUNC_OPTIONS: Array<SelectableValue<string>> = [\n    { label: 'none', value: 'none' },\n    { label: 'average', value: GEN_FUNC_AVERAGE },\n    { label: 'maximum', value: 'maximum' },\n    { label: 'minimum', value: 'minimum' },\n];\n\nexport const LOGS_SOURCE_DEVICE = 'device';\nexport const LOGS_SOURCE_STREAM = 'stream';\n\nexport const LOGS_SOURCE_OPTIONS: Array<SelectableValue<string>> = [\n    { label: 'Device', value: LOGS_SOURCE_DEVICE },\n    { label: 'Stream', value: LOGS_SOURCE_STREAM },\n];\n\nexport const LOGS_PARAMS_DEVICE_OPTIONS: Array<SelectableValue<string>> = [\n    { label: 'recv', value: 'recv' },\n    { label: 'send', value: 'send' },\n    { label: 'msgs', value: 'msgs' },\n];\n\nexport const LOGS_PARAMS_STREAM_OPTIONS: Array<SelectableValue<string>> = [\n    { label: 'accepted', value: 'accepted' },\n    { label: 'ack_latency', value: 'ack_latency' },\n    { label: 'read', value: 'read' },\n    { label: 'rejected', value: 'rejected' },\n    { label: 'skipped', value: 'skipped' },\n];\n\n// temporary method for backward compatibility\nexport function tempBackwardCompatibilityConversion(query: MyQuery): boolean {\n    // backward compatibility\n    if (query.queryType === undefined && query.entity !== undefined) {\n        // tranfser old query model to the new one\n        query.queryType = QUERY_TYPE_DEVICES;\n        if (typeof query.entity === \"number\")  {\n            query.useDeviceVariable = false;\n            query.devicesSelected = [{label: query.entityLabel, value: typeof query.entity === \"number\" ? query.entity : parseInt(query.entity, 10)}];\n        } else {\n            query.useDeviceVariable = true;\n            query.deviceVariable = query.entity;\n        }\n        if (query.param !== undefined) {\n            if (query.param.includes('$')) {\n                query.useTelemParamVariable = true;\n                query.telemParamVariable = query.param;\n            } else {\n                query.useTelemParamVariable = false;\n                query.telemParamsSelected = [];\n                query.telemParamsSelected.push(query.param);\n            }\n        }\n        query.generalizationFunction = query.func !== undefined ? query.func : GEN_FUNC_AVERAGE;\n        delete query.param;\n        delete query.func;\n        delete query.entity;\n        delete query.entityLabel;\n\n        return true;\n    }\n    return false;\n}\n","import { DataQueryResponse, FieldType, MetricFindValue, MutableDataFrame, ScopedVar, ScopedVars, SelectableValue } from \"@grafana/data\";\nimport { FetchResponse, getTemplateSrv } from \"@grafana/runtime\";\nimport { MyQuery } from \"types\";\n\n// function is used in query editor components to validate string that user enters into variable Input\nexport const processVariableInput = (inputValue: string,\n                                    query: MyQuery,\n                                    queryFieldName: string,\n                                    setVariable: React.Dispatch<React.SetStateAction<string>>,\n                                    setError: React.Dispatch<React.SetStateAction<string>>,\n                                    onChange: (value: MyQuery) => void,\n                                    onRunQuery: () => void) => {\n    if (inputValue === '') {\n        // nothing to do, just remove error message, if any\n        setError(\"\");\n        return;\n    }\n    // check user input, if this is a valid dashboard variable\n    const interpolations: any[] = [];\n    getTemplateSrv().replace(inputValue, undefined, undefined, interpolations);\n    if (interpolations[0] && interpolations[0].found === true) {\n        // matching dashboard variable is found\n        setVariable(inputValue);\n        setError(\"\");\n        onChange({ ...query, [queryFieldName]: inputValue });\n        onRunQuery();\n    } else {\n        // no matching dashboard variable has been found, display error message\n        setError(`Invalid variable: no variable ${inputValue} is defined for the dashboard`);\n    }\n}\n\n// function is used in metricFindQuery() method to generate common variable option json\nexport const prepareVariableOption = (itemName: string, itemId: number): MetricFindValue => {\n    const name = (itemName !== '') ? itemName.replace(/\\./g,'_') : '<noname>';\n    return {text: `#${itemId} - ${name}`, value: itemId};\n}\n\n// function is used in Select loadOption method to generate common select option json\nexport const prepareSelectOption = (itemName: string, itemId: number): SelectableValue => {\n    const name = (itemName !== '') ? itemName.replace(/\\./g,'_') : '<noname>';\n    return {label: `#${itemId} - ${name}`, value: itemId};\n}\n\n// function is used in query() method to resolve the list of selected options into the list of items' ids and fill the dictionary with items' labels\nexport const prepareItemsAndLabelsFromSelectedOptions = (itemsSelected: Array<SelectableValue<number>>, itemsLabels?: {[key: string]: string}): string[] => {\n    return itemsSelected.map(item => {\n        if (item.value === undefined) {\n            throw new Error(\"Wrong item value. Item ID is expected.\");\n        }\n        if (itemsLabels !== undefined) {\n            itemsLabels[item.value.toString()] = item.label ? item.label : '';\n        }\n        return item.value?.toString();\n    });   \n}\n\n// function is used in query() method to resolve the variable into the list of items' ids and fill the dictionary with items' labels\nexport const prepareItemsAndLabelsFromVariable = (variableName: string, scopedVars: ScopedVars, itemsLabels?: {[key: string]: string}): string[] => {\n    // resolve items' ids from variable\n    const items = getTemplateSrv().replace(variableName, scopedVars, 'csv').split(',');\n    if (itemsLabels !== undefined) {\n        // find dashoard variable with given name\n        const currentVariable = getTemplateSrv().getVariables().find(variable => (`$${variable.name}` === variableName));\n        if (currentVariable !== undefined) {\n            // get variable options\n            const options: Array<ScopedVar<string>> = JSON.parse(JSON.stringify(currentVariable)).options;\n            // iterate flespi items ids and find corresponding variable's option\n            items.map(itemId => {\n                options.find(option  => {\n                    const optionItemId = option.value.split(':')[0];\n                    if (optionItemId === itemId) {\n                        // corresponding option is found - store its text for future use in graphs legend as a label\n                        itemsLabels[itemId.toString()] = option.text;\n                    }\n                });\n            });\n        }\n    }\n    return items;\n}\n\n// function is used in query() method to process response with data from flespi and transform it into  grafana data frames\nexport const handleFetchDataQueryResponse = (response: FetchResponse, refId: string, labels?: string): DataQueryResponse => {\n    // array to collect timestamps values for data frame, format:\n    // [ 1705074821000, 1705074831000, 1705074841000 ]\n    const timeValues = [];\n    // object with arrays of parameters' values for data frame, format:\n    // {\n    //   param_one: [ 11, 13, 18 ],\n    //   param_two: [ 25, 28, null ],\n    //   param_three: [ null, 40, 44 ]\n    // }\n    const parametersValues: any = {};\n    // helper array to keep a set of parameters' names discovered in the returned messages\n    const knownParameters: string[] = [];\n    // helper variable to keep track of the number of values added into arrays\n    let valuesArrayLength = 0;\n\n    // iterate over returned container messages\n    const messages = response.data.result;\n    const messagesCount = messages.length;\n    if (messagesCount === 0) {\n        return { data: [] };\n    }\n    for (let i = 0; i < messagesCount; i++) {\n        let message: any = messages[i];\n        if (message.key !== undefined && message.params !== undefined) {\n            message = message.params;\n        }\n        // collect time value for data frame\n        let { timestamp, ...messageRest } = message;\n        const time = timestamp ? timestamp * 1000 : message.key * 1000;\n        timeValues.push(time);\n\n        // iterate over known parameters names and push all known parameter's values to corresponding array\n        for (let ii = 0; ii < knownParameters.length; ii++) {\n            const parameterName = knownParameters[ii];\n            parametersValues[parameterName].push(messageRest[parameterName] !== undefined ? messageRest[parameterName] : null);\n            // delete processed parameter from message\n            delete messageRest[parameterName];\n        }\n        // process the rest message parameters, that are known so far\n        Object.keys(messageRest).map(parameterName => {\n            // create corresponding array and push parameter's value into it, padding with required number of nulls\n            const parameterValue = messageRest[parameterName];\n            parametersValues[parameterName] = [];\n            for (let iii = 0; iii < valuesArrayLength; iii++){\n                parametersValues[parameterName].push(null);\n            }\n            parametersValues[parameterName].push(parameterValue);\n            // save parameter name in the set\n            knownParameters.push(parameterName);\n        });\n        // we've processed one message - increament the number of stored values\n        valuesArrayLength++;\n    }\n\n    return createDataFrame(timeValues, parametersValues, refId, labels);\n}\n\nexport const handleFetchIntervalsResponse = (response: FetchResponse, parameters: string[], refId: string, labels?: string): DataQueryResponse => {\n    const result = response.data.result;\n    if (result.length === 0) {\n        return { data: [] };\n    }\n\n    // array to collect timestamps values for data frame, format:\n    // [ 1705074821000, 1705074831000, 1705074841000 ]\n    const timeValues = [];\n    const parametersValues: any = {};\n    const intervalsCount = result.length;\n    for (let i = 0; i < intervalsCount; i++) {\n        let interval: any = result[i];\n        // push interval begin and end values into time field\n        timeValues.push(interval.begin * 1000);\n        timeValues.push(interval.end * 1000);\n        for (const parameter of parameters) {\n            if (interval[parameter] !== undefined) {\n                if (parametersValues[parameter] === undefined) {\n                    parametersValues[parameter] = [];\n                }\n                const parameterValues = parametersValues[parameter];\n                parameterValues.push(interval[parameter]);\n                parameterValues.push(null);\n            }\n        }\n    }\n    return createDataFrame(timeValues, parametersValues, refId, labels);\n}\n\nconst createDataFrame = (timeValues: number[], parametersValues: {[key: string]: any}, refId: string, labels?: string): DataQueryResponse => {\n    // Now create a data frame from collected values\n    const frame = new MutableDataFrame({\n        refId: refId,\n        fields: [\n            { name: 'Time', type: FieldType.time, values: timeValues },\n        ],\n    })\n    Object.keys(parametersValues).map(fieldName => {\n        if (parametersValues[fieldName].length > 0) {\n            let fieldType: FieldType;\n            switch (typeof parametersValues[fieldName][0]) {\n                case \"number\":\n                    fieldType = FieldType.number;\n                    break;\n                case \"string\":\n                    fieldType = FieldType.string;\n                    break;\n                case \"boolean\":\n                    fieldType = FieldType.boolean;\n                    break;\n                default:\n                    fieldType = FieldType.other;\n                    break;\n            }\n            frame.addField({\n                name: fieldName,\n                type: fieldType,\n                values: parametersValues[fieldName],\n                labels: (labels !== undefined) ? {item: `[${labels}]`} : undefined,\n            });\n        }\n    });\n\n    return { data: [frame] };\n}\n","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n} from '@grafana/data';\n\nimport { Observable, merge } from 'rxjs';\nimport { MyQuery, MyDataSourceOptions } from './types';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { map } from 'rxjs/operators';\nimport { FlespiSDK } from 'flespi-sdk';\nimport { REGEX_DEVICES, REGEX_ACCOUNTS, REGEX_CONTAINERS, QUERY_TYPE_DEVICES, QUERY_TYPE_STATISTICS, QUERY_TYPE_CONTAINERS, QUERY_TYPE_INTERVALS, tempBackwardCompatibilityConversion, LOGS_SOURCE_DEVICE, VARIABLES_QUERY_STREAMS, QUERY_TYPE_LOGS, LOGS_SOURCE_STREAM, REGEX_CALCULATORS } from './constants';\nimport { handleFetchDataQueryResponse, handleFetchIntervalsResponse, prepareItemsAndLabelsFromSelectedOptions, prepareItemsAndLabelsFromVariable, prepareVariableOption } from 'utils';\n\n// default query values\nexport const defaultQuery: Partial<MyQuery> = {\n    queryType: QUERY_TYPE_DEVICES,\n    // queryType === QUERY_TYPE_DEVICES: query devices' messages' parameters (telemetry)\n    useDeviceVariable: false,\n    devicesSelected: [],\n    deviceVariable: '',\n    useTelemParamVariable: false,\n    telemParamsSelected: [],\n    telemParamVariable: '',\n    // queryType = statistics: query account's statistics parameters\n    useAccountVariable: false,\n    accountsSelected: [],\n    accountVariable: '',\n    useStatParamVariable: false,\n    statParamsSelected: [],\n    statParamVariable: '',\n    // used for both queryType === QUERY_TYPE_DEVICES, queryType === QUERY_TYPE_STATISTICS and queryType === QUERY_TYPE_CONTAINERS\n    generalizationFunction: \"average\", \n    // the following fields are used if queryType === QUERY_TYPE_LOGS\n    logsSourceType: LOGS_SOURCE_DEVICE,                              \n    useLogsSourceVariable: false,\n    logsSourcesSelected: [],\n    logsSourceVariable: '',\n    useLogsParamVariable: false,\n    logsParamsSelected: [],\n    logsParamVariable: '',\n    // - // the following fields are used if queryType === QUERY_TYPE_CONTAINERS             \n    useContainerVariable: false,\n    containersSelected: [],\n    containerVariable: '',\n    useContParamVariable: false,\n    contParamsSelected: [],\n    contParamVariable: '',\n    // - // the following fields are used if queryTypr === QUERY_TYPE_INTERVALS\n    useCalculatorVariable: false,\n    calculatorsSelected: [],\n    calculatorVariable: '',\n    useCalcDeviceVariable: false,\n    calcDevicesSelected: [],\n    calcDeviceVariable: '',\n    useIntParamVariable: false,\n    intParamsSelected: [],\n    intParamVariable: '',\n};\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n    url: string;\n\n    constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n        super(instanceSettings);\n\n        this.url = instanceSettings.url ? instanceSettings.url : '';\n    }\n\n    // This function is called when you hit 'Run query' button for dashboard variable with type query\n    // And to resolve possible values of Device and Parameter of variables selects\n    async metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n        if (query.trim() === VARIABLES_QUERY_STREAMS) {\n            // this is streams variable\n            return (await FlespiSDK .fetchAllFlespiStreams(this.url)).map(stream => (prepareVariableOption(stream.name, stream.id)));\n        }\n        const interpolated = getTemplateSrv().replace(query.trim(), options.scopedVars, 'csv');\n        let variableQueryParsed = interpolated.match(REGEX_DEVICES);\n        if (variableQueryParsed !== null) {\n            // this is devices variable\n            if (variableQueryParsed[0] === 'devices.*') {\n                // this is variable query 'devices.*' - return all flespi devices available for the token\n                return (await FlespiSDK.fetchAllFlespiDevices(this.url)).map(device => (prepareVariableOption(device.name, device.id)));\n            } else {\n                // this is variable query 'devices.#device_id - device_name.parameters.*'\n                // device id is in the 3 array element of the parsed query\n                const deviceId = variableQueryParsed[3];\n                // fetch and transform returned parameters to the required format [{'text': 'param.1'}, {'text':'param.2'}]\n                return (await FlespiSDK.fetchDeviceTelemetryParameters(deviceId, this.url)).map((parameter: string) => ({ text: parameter }));\n            }\n        }\n        variableQueryParsed = interpolated.match(REGEX_ACCOUNTS);\n        if (variableQueryParsed !== null) {\n            // this is accounts variable\n            if (variableQueryParsed[0] === 'accounts.*') {\n                // this is variable query 'accounts.*' - return all flespi accounts and subaccounts available for the token\n                const accounts = await Promise.all([\n                    FlespiSDK.fetchFlespiAccount(this.url),\n                    FlespiSDK.fetchAllFlespiSubaccounts(this.url)\n                ]);\n                return (await Promise.all(accounts))\n                    .flat()\n                    .map(account => (prepareVariableOption(account.name, account.id)));\n            } else {\n                // this is variable query 'accounts.#account_id - account_name.statistics.*'\n                // account id is in the 3 array element of the parsed query\n                const accountId = variableQueryParsed[3];\n                // all statistics parameters are the same for all accounts that's why it's enough to make just one request\n                // for the first account to get the list of statistics parameters\n                // and transform returned parameters to the required format [{'text': 'param.1'}, {'text':'param.2'}]\n                return (await FlespiSDK.fetchFlespiStatisticsParametersForAccount(accountId, this.url)).map((parameter: string) => ({ text: parameter }));\n            }\n        }  \n\n        variableQueryParsed = interpolated.match(REGEX_CONTAINERS);\n        if (variableQueryParsed !== null) {\n            // this is container variable\n            if (variableQueryParsed[0] === 'containers.*') {\n                // this is variable query 'containers.*' - return all flespi containers available for the token\n                return (await FlespiSDK.fetchAllFlespiContainers(this.url)).map(container => (prepareVariableOption(container.name, container.id)));\n            } else {\n                // this is variable query 'containers.<container_id>.parameters.*'\n                // container id is in the 3 array element of the parsed query\n                const containerId = parseInt(variableQueryParsed[3], 10);\n                // fetch and transform returned parameters to the required format [{'text': 'param.1'}, {'text':'param.2'}]\n                return (await FlespiSDK.fetchFlespiContainerParameters(containerId, this.url, '')).map((parameter: string) => ({ text: parameter }));\n            }\n        }\n\n        variableQueryParsed = interpolated.match(REGEX_CALCULATORS);\n        if (variableQueryParsed != null) {\n            if (variableQueryParsed[0] === 'calculators.*') {\n                // this is variable query 'calculators.*' - return all flespi calculators available for the token\n                return (await FlespiSDK.fetchAllFlespiCalculators(this.url)).map(calculator => (prepareVariableOption(calculator.name, calculator.id)));\n            } else if (variableQueryParsed[0].endsWith('.devices.*')) {\n                // this is variable query 'calculators.1685993.devices.*' - return devices assigned to calculator\n                const calculatorId = parseInt(variableQueryParsed[3], 10);\n                return (await FlespiSDK.fetchFlespiDevicesAssignedToCalculator(calculatorId, this.url)).map(device => (prepareVariableOption(device.name, device.id)));               \n            } else {\n                // this is variable query 'calculators.1685993.devices.5486936.parameters.*' - return intervals' parameters\n                const calculatorId = variableQueryParsed[5];\n                // fetch and transform returned parameters to the required format [{'text': 'param.1'}, {'text':'param.2'}]\n                return (await FlespiSDK.fetchFlespiIntervalParameters(calculatorId, this.url)).map((parameter: string) => ({ text: parameter }));\n            }\n        }     \n        // wrong variable query\n        return Promise.resolve([]);\n    }\n\n    // datasource's health check\n    async testDatasource() {\n        // select all flespi devices available for the configured token\n        const flespiDevices = await FlespiSDK.fetchAllFlespiDevices(this.url);\n        const flespiAccount = await FlespiSDK.fetchFlespiAccount(this.url);\n        const flespiSubaccounts = await FlespiSDK.fetchAllFlespiSubaccounts(this.url);\n        const flespiStreams = await FlespiSDK.fetchAllFlespiStreams(this.url);        \n        return {\n            status: 'success',\n            message: `Success! The configured token has access to ${flespiDevices.length} flespi devices, ${flespiStreams.length} streams, account ID ${flespiAccount[0].id} and ${flespiSubaccounts.length} subaccounts.`,\n        };\n    }\n\n    // This function is called when you edit query or choose device in variable's selector\n    query(options: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\n\n        const observableResponses: Array<Observable<DataQueryResponse>> = options.targets.map((query) => {\n\n            console.log(JSON.stringify(query));\n\n            // apply backward compatibility conversion, if needed\n            tempBackwardCompatibilityConversion(query);\n\n            // prepare time range parameters for query\n            const { range } = options;\n            const from = Math.floor(range!.from.valueOf() / 1000);\n            const to = Math.ceil(range!.to.valueOf() / 1000);\n        \n            // prepare ganaralization function params 'generalize' and 'method', if needed\n            const genFunction = query.generalizationFunction;\n            let genInterval: number | undefined;\n            if (genFunction !== undefined && (genFunction === 'average' || genFunction === 'minimum' || genFunction === 'maximum')) {\n                const intervalSec = (options.scopedVars.__interval_ms) ? options.scopedVars.__interval_ms.value / 1000 : 0;\n                const maxDataPoints = options.maxDataPoints ? options.maxDataPoints : 0;\n                if (intervalSec > 60 || (intervalSec !== 0 && maxDataPoints > 0 && ((to - from)/intervalSec > maxDataPoints))) {\n                    // apply generalization function\n                    genInterval = Math.floor((to - from)/ maxDataPoints);\n                }\n            }\n\n            // determine the type of query to perform\n            switch(query.queryType) {\n                case QUERY_TYPE_DEVICES:\n                    let devices: string[], telemParameters: string[], devicesLabels: {[key: string]: string,} = {};\n                    if (query.useDeviceVariable === true) {\n                        // resolve devices' ids from variable, that is stored in query.deviceVariable field and save device's label to be displayed on the graph\n                        devices = prepareItemsAndLabelsFromVariable(query.deviceVariable, options.scopedVars, devicesLabels);\n                    } else {\n                        // use ids of selected devices, that are stored in query.devicesSelected field\n                        devices = prepareItemsAndLabelsFromSelectedOptions(query.devicesSelected, devicesLabels);\n                    }\n                    // prepare telemetry parameters\n                    if (query.useTelemParamVariable === true) {\n                        // resolve parameters from variable, that is stored in query.telemParamVariable field\n                        telemParameters = getTemplateSrv().replace(query.telemParamVariable, options.scopedVars, 'csv').split(',');\n                    } else {\n                        telemParameters = query.telemParamsSelected;\n                    }\n                    if (devices.length === 0 || telemParameters.length === 0) {\n                        return new Observable<DataQueryResponse>();\n                    }\n                    console.log(\"query::devices::\" + devices + \"::parameters::\" + telemParameters + \"::\");\n                    // fetch device messages and transform it to data frame\n                    const deviceObservableResponses = devices.map(device => {\n                        const observableResponse = FlespiSDK.fetchFlespiDevicesMessages(device, telemParameters, this.url, from, to, genFunction, genInterval)\n                        .pipe(\n                            map((response) => handleFetchDataQueryResponse(response, query.refId + ':' + device, (devices.length > 1 || options.targets.length > 1) ? devicesLabels[device.toString()] : undefined))\n                        )\n                        return observableResponse;\n                    });\n                    return merge(...deviceObservableResponses); \n\n                case QUERY_TYPE_STATISTICS:\n                    // query accounts statistics: expecting query parameters for accounts and statistics parameters\n                    let accounts: string[], statParameters: string[], accountsLabels: {[key: string]: string,} = {}\n                    // prepare accounts ids\n                    if (query.useAccountVariable === true) {\n                        // resolve accounts ids from variable, that is stored in query.accountVariable field and save account's label to be diplayed on the graph\n                        accounts = prepareItemsAndLabelsFromVariable(query.accountVariable, options.scopedVars, accountsLabels);\n                    } else {\n                        // use ids of selected accounts, that are stored in query.accountsSelected field as values\n                        accounts = prepareItemsAndLabelsFromSelectedOptions(query.accountsSelected, accountsLabels);\n                    }\n                    // prepare statistics parameters\n                    if (query.useStatParamVariable === true) {\n                        // resolve parameters from variable, that is stored in query.statParamVariable field\n                        statParameters = getTemplateSrv().replace(query.statParamVariable, options.scopedVars, 'csv').split(',');\n                    } else {\n                        statParameters = query.statParamsSelected;\n                    }\n                    if (accounts.length === 0 || statParameters.length === 0) {\n                        return new Observable<DataQueryResponse>();\n                    }\n\n                    console.log(\"query::statistics::accounts::\" + accounts + \"::parameters::\" + statParameters + \"::\");\n                    \n                    if (Array.isArray(accounts) && accounts.length === 0 || Array.isArray(statParameters) && statParameters.length === 0) {\n                        // either account or parameter is not selected, return empty response\n                        return new Observable<DataQueryResponse>();\n                    }\n                    // fetch statistics and transform it to data frame\n                    const accountObservableResponses = accounts.map(account => {\n                        const observableResponse = FlespiSDK.fetchFlespiAccountsStatistics(account, statParameters, this.url, from, to, genFunction, genInterval)\n                        .pipe(\n                            map((response) => handleFetchDataQueryResponse(response, query.refId + ':' + account, (accounts.length > 1 || options.targets.length > 1) ? accountsLabels[account.toString()] : undefined))\n                        )\n                        return observableResponse;\n                    })\n                    return merge(...accountObservableResponses); \n\n                case QUERY_TYPE_LOGS:\n                    // prepare logs parameters\n                    let logParameters: string[];\n                    if (query.useLogsParamVariable === true) {\n                        // resolve parameters from variable, that is stored in query.logsParamVariable field\n                        logParameters = getTemplateSrv().replace(query.logsParamVariable, options.scopedVars, 'csv').split(',');\n                    } else {\n                        logParameters = query.logsParamsSelected;\n                    }\n                    switch (query.logsSourceType) {\n                        case LOGS_SOURCE_DEVICE:\n                            let devices: string[], devicesLabels: {[key: string]: string,} = {};\n                            if (query.useLogsSourceVariable === true) {\n                                // resolve devices from variable that is stored in variable query.logsSourceVariable and prepare devices labels to be displayed later on the graph \n                                devices = prepareItemsAndLabelsFromVariable(query.logsSourceVariable, options.scopedVars, devicesLabels);     \n                            } else {\n                                // use ids of selected streams, that are stored in query.logsSourcesSelected field\n                                devices = prepareItemsAndLabelsFromSelectedOptions(query.logsSourcesSelected, devicesLabels);\n                            }\n                            if (devices.length === 0 || logParameters.length === 0) {\n                                return new Observable<DataQueryResponse>();\n                            }\n                            console.log(\"query::logs::devices::\" + devices + \"::parameters::\" + logParameters + \"::\");\n                            // fetch device's logs and transform it to data frame\n                            const deviceObservableResponses = devices.map(device => {\n                                const observableResponse = FlespiSDK.fetchFlespiDevicesLogs(device, logParameters, this.url, from, to)\n                                .pipe(\n                                    map((response) => handleFetchDataQueryResponse(response, query.refId + ':' + device, (devices.length > 1 || options.targets.length > 1) ? devicesLabels[device.toString()] : undefined))\n                                )\n                                return observableResponse;\n                            });\n                            return merge(...deviceObservableResponses); \n\n                        case LOGS_SOURCE_STREAM:\n                            let streams: string[], streamsLabels: {[key: string]: string,} = {};\n                            if (query.useLogsSourceVariable === true) {\n                                // resolve streams from variable that is stored in variable query.logsSourceVariable and prepare streams labels to be displayed later on the graph \n                                streams = prepareItemsAndLabelsFromVariable(query.logsSourceVariable, options.scopedVars, streamsLabels);                \n                            } else {\n                                // use ids of selected streams, that are stored in query.logsSourcesSelected field\n                                streams = prepareItemsAndLabelsFromSelectedOptions(query.logsSourcesSelected, streamsLabels);\n                            }\n                            if (streams.length === 0 || logParameters.length === 0) {\n                                return new Observable<DataQueryResponse>();\n                            }\n                            console.log(\"query::logs::streams::\" + streams + \"::parameters::\" + logParameters + \"::\");\n                            // fetch stream's logs and transform it to data frame\n                            const streamObservableResponses = streams.map(stream => {\n                                const observableResponse = FlespiSDK.fetchFlespiStreamsLogs(stream, logParameters, this.url, from, to)\n                                .pipe(\n                                    map((response) => handleFetchDataQueryResponse(response, query.refId + ':' + stream, (streams.length > 1 || options.targets.length > 1) ? streamsLabels[stream.toString()] : undefined))\n                                )\n                                return observableResponse;\n                            });\n                            return merge(...streamObservableResponses); \n                            \n                        default:\n                            return new Observable<DataQueryResponse>();\n                    }\n\n                case QUERY_TYPE_CONTAINERS:\n                    let containers: string[], contParameters: string[], containersLabels: {[key: string]: string,} = {};\n                    if (query.useContainerVariable === true) {\n                        // resolve container's ids from variable, that is stored in query.containerVariable field and save containers' labels to be displayed on the graph's legend\n                        containers = prepareItemsAndLabelsFromVariable(query.containerVariable, options.scopedVars, containersLabels);\n                    } else {\n                        containers = prepareItemsAndLabelsFromSelectedOptions(query.containersSelected, containersLabels);\n                    }\n                    // prepare container parameters\n                    if (query.useContParamVariable === true) {\n                        // resolve parameters from variable, that is stored in query.contParamVariable field\n                        contParameters = getTemplateSrv().replace(query.contParamVariable, options.scopedVars, 'csv').split(',');\n                    } else {\n                        contParameters = query.contParamsSelected;\n                    }\n                    if (containers.length === 0 || contParameters.length === 0) {\n                        return new Observable<DataQueryResponse>();\n                    }\n                    console.log(\"query::containers::\" + containers + \"::parameters::\" + contParameters + \"::\");\n                    // fetch container messages and transform it to data frame\n                    const containerObservableResponses = containers.map(container => {\n                        const observableResponse = FlespiSDK.fetchFlespiContainersMessages(container, contParameters, this.url, from, to, genFunction, genInterval)\n                        .pipe(\n                            map((response) => handleFetchDataQueryResponse(response, query.refId + ':' + container, (containers.length > 1 || options.targets.length > 1) ? containersLabels[container.toString()] : undefined))\n                        )\n                        return observableResponse;\n                    });\n                    return merge(...containerObservableResponses); \n\n                case QUERY_TYPE_INTERVALS:\n                    let calculators: string[], calcDevices: string[], intParameters:  string[];\n                    let calculatorsLabels: {[key: string]: string,} = {}, calcDevicesLabels: {[key: string]: string,} = {};\n                    if (query.useCalculatorVariable === true) {\n                        calculators = prepareItemsAndLabelsFromVariable(query.calculatorVariable, options.scopedVars, calculatorsLabels);\n                    } else {\n                        calculators = prepareItemsAndLabelsFromSelectedOptions(query.calculatorsSelected, calculatorsLabels);\n                    }\n                    if (query.useCalcDeviceVariable === true) {\n                        calcDevices = prepareItemsAndLabelsFromVariable(query.calcDeviceVariable, options.scopedVars, calcDevicesLabels);\n                    } else {\n                        calcDevices = prepareItemsAndLabelsFromSelectedOptions(query.calcDevicesSelected, calcDevicesLabels);\n                    }\n                    if (query.useIntParamVariable === true) {\n                        intParameters = getTemplateSrv().replace(query.intParamVariable, options.scopedVars, 'csv').split(',');\n                    } else {\n                        intParameters = query.intParamsSelected;\n                    }\n                    if (calculators.length === 0 || calcDevices.length === 0 || intParameters.length === 0) {\n                        return new Observable<DataQueryResponse>();\n                    }\n\n                    console.log(\"query::intervals::calculators::\" + calculators + \"::calcdevices::\" + calcDevices + \"::params::\" + intParameters);\n                    const calculatorsObservableResponses = calculators.map(calculator => {\n                        const devicesObservableResponses =  calcDevices.map(device => {\n                            const observableResponse = FlespiSDK.fetchFlespiIntervals(calculator, device, intParameters, this.url, from, to)\n                            .pipe(\n                                map((response) => handleFetchIntervalsResponse(response, intParameters, query.refId + ':' + calculator + ':' + device))\n                            )\n                            return observableResponse;\n                        });\n                        return merge(...devicesObservableResponses);\n                    });\n\n                    return merge(...calculatorsObservableResponses);\n\n                default:\n                    return new Observable<DataQueryResponse>();\n            }\n        });\n\n        return merge(...observableResponses);\n    }\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { InlineField, InlineLabel, Input, MultiSelect, Switch } from \"@grafana/ui\";\nimport { QUERY_TYPE_DEVICES } from \"../constants\";\nimport { DataSource } from \"datasource\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { prepareSelectOption, processVariableInput } from \"utils\";\n\nexport function Device(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    const [ devices, setDevices ] = useState<Array<SelectableValue<number>>>([]);\n    const [ useDeviceVariable, setUseDeviceVariable ] = useState<boolean>(query.useDeviceVariable);\n    const [ deviceVariable, setDeviceVariable ] = useState<string>(query.deviceVariable);\n    const [ devicesSelected, setDevicesSelected ] = useState<Array<SelectableValue<number>>>(query.devicesSelected);\n    const [ error, setError ] = useState<string>(\"\");\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load all available devices for future use as select options\n    /////////////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n        // load devices and store them into state for the later use in devices drop-down\n        const fetchDevices = async () => {\n            const values = (await FlespiSDK.fetchAllFlespiDevices(datasource.url)).map(device => (prepareSelectOption(device.name, device.id)));\n            setDevices(values);\n        }\n        fetchDevices().catch(console.error);\n      }, [datasource, query]);\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_DEVICES\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_DEVICES) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify flespi device for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose devices for query\">\n                Devices\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                    <Switch\n                        value={!!useDeviceVariable}\n                        onChange={() => {\n                            setUseDeviceVariable(!useDeviceVariable);\n                            onChange({ ...query, useDeviceVariable: !query.useDeviceVariable });\n                        }}\n                    />\n                </div>\n            </InlineField>\n            {!useDeviceVariable ? (\n                // if useDeviceVariable==false - render Select with devices for the user to select a device for the query\n                <InlineField>\n                    <MultiSelect \n                        value={devicesSelected}\n                        options={devices}\n                        onChange={(option: Array<SelectableValue<number>>) => {\n                            setDevicesSelected(option);\n                            onChange({ ...query, devicesSelected: option });\n                            onRunQuery();\n                        }}\n                        width={40}\n                        placeholder=\"Select device\"\n                    />\n                </InlineField>\n            ) : (\n                // if useDeviceVariable==true - render Input where user will type name of the variable to take device from\n                <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"device\"\n                    value={deviceVariable}\n                    onChange={(event: any) => {\n                        setDeviceVariable(event.target.value);\n                    }}\n                    onKeyDown={(event: any) => {\n                        // process 'Enter' key down event only\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        processVariableInput(event.target.value, query, 'deviceVariable', setDeviceVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'deviceVariable', setDeviceVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$device\"\n                />\n                </InlineField>\n            )}\n        </div>\n    );\n}\n","import { QueryEditorProps } from \"@grafana/data\";\nimport { InlineField, RadioButtonGroup } from \"@grafana/ui\";\nimport { QUERY_TYPE_OPTIONS } from \"../constants\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { defaults } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\n\n\nexport function QueryType(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, query } = props;  \n    const defaultedQuery = defaults(query, defaultQuery);\n    const [ queryType, setQueryType ] = useState<string>(defaultedQuery.queryType);\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render Query Type element: radio buttons group \n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n          <InlineField label=\"Query Type\" labelWidth={26}>\n            <RadioButtonGroup \n                options={QUERY_TYPE_OPTIONS}\n                value={queryType} \n                onChange={(event: any) => {\n                setQueryType(event);\n                onChange({ ...query, queryType: event });\n                }} />\n          </InlineField>\n        </div>\n      );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { InlineField, InlineLabel, Input, MultiSelect, Switch } from \"@grafana/ui\";\nimport { QUERY_TYPE_STATISTICS } from \"../constants\";\nimport { DataSource } from \"datasource\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { prepareSelectOption, processVariableInput } from \"utils\";\n\nexport function Account(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;  \n    const [ accounts, setAccounts ] = useState<Array<SelectableValue<number>>>([]);\n    const [ useAccountVariable, setUseAccoutVariable ] = useState<boolean>(query.useAccountVariable);\n    const [ accountVariable, setAccountVariable ] = useState<string>(query.accountVariable);\n    const [ accountsSelected, setAccountSelected ] = useState<Array<SelectableValue<number>>>(query.accountsSelected);\n    const [ error, setError ] = useState<string>(\"\");\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load account and all available subaccounts for future use as select options\n    /////////////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n        const fetchAccounts = async () => {\n            const accounts = await Promise.all([\n                FlespiSDK.fetchFlespiAccount(datasource.url),\n                FlespiSDK.fetchAllFlespiSubaccounts(datasource.url)\n            ]);\n            const values = (await Promise.all(accounts))\n                .flat()\n                .map(account => (prepareSelectOption(account.name, account.id)));\n            setAccounts(values);\n        }\n        fetchAccounts().catch(console.error);\n    }, [datasource, query]);\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_STATISTICS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_STATISTICS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify flespi accounts for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose accounts for query\">\n                Accounts\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n            <div className='gf-form-switch'>\n                <Switch\n                value={!!useAccountVariable}\n                onChange={() => {\n                    setUseAccoutVariable(!useAccountVariable);\n                    onChange({ ...query, useAccountVariable: !query.useAccountVariable });\n                }}\n                />\n            </div>\n            </InlineField>\n            {!useAccountVariable ? (\n                <InlineField>\n                    <MultiSelect \n                        value={accountsSelected}\n                        options={accounts}\n                        onChange={(option: Array<SelectableValue<number>>) => {\n                            setAccountSelected(option);\n                            onChange({ ...query, accountsSelected: option });\n                            onRunQuery();\n                        }}\n                        width={40}\n                        placeholder=\"Select subaccount\"                        \n                    />\n                </InlineField>\n            ) : (\n                // if useAccountVariable==true - render Input where user will type name of the variable to take account from\n                <InlineField invalid={error ? true : false} error={error}>\n                    <Input\n                        name=\"account\"\n                        value={accountVariable}\n                        onChange={(event: any) => {\n                            setAccountVariable(event.target.value);\n                        }}\n                        onKeyDown={(event: any) => {\n                            // process 'Enter' key down event only\n                            if (event.key !== 'Enter') {\n                                return;\n                            }\n                            processVariableInput(event.target.value, query, 'accountVariable', setAccountVariable, setError, onChange, onRunQuery);\n                        }}\n                        onBlur={(event: any) => {\n                            processVariableInput(event.target.value, query, 'accountVariable', setAccountVariable, setError, onChange, onRunQuery);\n                        }}\n                        required\n                        type=\"text\"\n                        width={40}\n                        placeholder=\"$account\"\n                    />\n                </InlineField>\n            )}\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { AsyncMultiSelect, InlineField, InlineLabel, Input, Switch } from \"@grafana/ui\";\nimport { QUERY_TYPE_DEVICES } from \"../constants\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { defaults } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { prepareItemsAndLabelsFromSelectedOptions, prepareItemsAndLabelsFromVariable, processVariableInput } from \"utils\";\n\n\nexport function TelemetryParameter(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource } = props;\n    const query = defaults(props.query, defaultQuery);\n\n    const [ useTelemParamVariable, setUseTelemParamVariable ] = useState<boolean>(query.useTelemParamVariable);\n    const [ telemParamVariable, setTelemParamVariable ] = useState<string>(query.telemParamVariable);\n    const [ telemParamsSelected, setTelemParamsSelected ] = useState<Array<SelectableValue<string>>>(() => {\n        if (query.telemParamsSelected) {\n            return query.telemParamsSelected.map((parameter: string) => ({label: parameter, value: parameter}));\n        }\n        return [];\n    });\n    const [ error, setError ] = useState<string>(\"\");\n\n    // prepare list of devices\n    const devicesIds: string[] = (query.useDeviceVariable === true) ? prepareItemsAndLabelsFromVariable(query.deviceVariable, {}) : prepareItemsAndLabelsFromSelectedOptions(query.devicesSelected);\n    const devices = devicesIds.join();\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load telemetry parameters for the devices selected in Devices drop down\n    /////////////////////////////////////////////////////////////////////////////////\n    const loadFlespiDevicesParameters = async (inputValue: string) => {\n        if (devices === '') {\n            // device is not yet selected, return empty array of parameters\n            return Promise.resolve([]);\n        }\n        // fetch telemetry parameters for all selected devices\n        const telemetries = await Promise.all(devicesIds.map(device => {\n            return FlespiSDK.fetchDeviceTelemetryParameters(device, datasource.url).then((result: string[]) => {\n                return result\n                // filter parameters based on user input in Parameter select field\n                .filter((parameter: string) => parameter.toLowerCase().includes(inputValue));\n            });\n        }));\n        const telemetryParameters = (await Promise.all(telemetries)).flat();\n        const telemetryParametersUnique = new Set(telemetryParameters);\n\n        return Array.from(telemetryParametersUnique.values())\n            .sort()\n            .map((parameter: string) => ({value: parameter, label: parameter}));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_DEVICES\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_DEVICES) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify telemetry parameters of flespi device for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div  className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose telemetry parameters for query\">\n                Parameters\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                <Switch\n                    value={!!useTelemParamVariable}\n                    onChange={() => {\n                        setUseTelemParamVariable(!useTelemParamVariable);\n                        onChange({ ...query, useTelemParamVariable: !query.useTelemParamVariable });\n                    }}\n                />\n                </div>     \n            </InlineField>\n        {!useTelemParamVariable ? (\n            <InlineField labelWidth={16}>\n                <AsyncMultiSelect\n                    key={devices}\n                    value={telemParamsSelected}\n                    loadOptions={loadFlespiDevicesParameters}\n                    defaultOptions\n                    cacheOptions\n                    onChange={(option: any) => {\n                        setTelemParamsSelected(option);\n                        onChange({ ...query, telemParamsSelected: option.map((param: SelectableValue<string>) => (param.value)) });\n                        onRunQuery();\n                    }}\n                    width={40}\n                    noOptionsMessage={`Telemetry not found for devices' IDs: ${devices}`}\n                    allowCustomValue={true}\n                />\n            </InlineField>\n            ) : (\n            <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"parameter\"\n                    value={telemParamVariable}\n                    onChange={(event: any) => {\n                        setTelemParamVariable(event.target.value);\n                        onChange({ ...query, telemParamVariable: event.target.value });\n                    }}\n                    onKeyDown={(event: any) => {\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        onRunQuery();\n                        processVariableInput(event.target.value, query, 'telemParamVariable', setTelemParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'telemParamVariable', setTelemParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$parameter\"\n                />\n            </InlineField>\n        )}\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { AsyncMultiSelect, InlineField, InlineLabel, Input, Switch } from \"@grafana/ui\";\nimport { QUERY_TYPE_STATISTICS } from \"../constants\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { defaults } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { prepareItemsAndLabelsFromSelectedOptions, prepareItemsAndLabelsFromVariable, processVariableInput } from \"utils\";\n\nexport function StatisticsParameter(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource } = props;\n    const query = defaults(props.query, defaultQuery);\n\n    const [ useStatParamVariable, setUseStatParamVariable ] = useState<boolean>(query.useStatParamVariable);\n    const [ statParamVariable, setStatParamVariable ] = useState<string>(query.statParamVariable);\n    const [ statParamsSelected, setStatParamsSelected ] = useState<Array<SelectableValue<string>>>(() => {\n        if (query.statParamsSelected) {\n            return query.statParamsSelected.map((parameter: string) => ({label: parameter, value: parameter}));\n        }\n        return [];\n    });\n    const [ error, setError ] = useState<string>(\"\");\n\n    // prepare list of accounts\n    const accountsIDds: string[] = (query.useAccountVariable === true) ? prepareItemsAndLabelsFromVariable(query.accountVariable, {}) : prepareItemsAndLabelsFromSelectedOptions(query.accountsSelected);\n    const accounts = accountsIDds.join();\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load statistics parameters for the accounts selected in Accounts drop down\n    /////////////////////////////////////////////////////////////////////////////////\n    const loadFlespiStatsParameters = async (inputValue: string) => {\n        if (accounts === '') {\n            // account is not yet selected, return empty array of parameters\n            return Promise.resolve([]);\n        }\n        // fetch statistics parameters\n        const statistics = await Promise.all(accountsIDds.map(account => {\n            return FlespiSDK.fetchFlespiStatisticsParametersForAccount(account, datasource.url).then((result: string[]) => {\n                return result\n                // filter parameters based on user input in Parameter select field\n                .filter((parameter: string) => parameter.toLowerCase().includes(inputValue));\n            });\n        }));\n        const statisticsParameters = (await Promise.all(statistics)).flat();\n        const statisticsParametersUnique = new Set(statisticsParameters);\n\n        return Array.from(statisticsParametersUnique.values())\n            .sort()\n            .map((parameter: string) => ({value: parameter, label: parameter}));\n    };\n\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_STATISTICS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_STATISTICS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify statistics parameters of flespi account for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div  className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose statistics parameters for query\">\n                Parameters\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                <Switch\n                    value={!!useStatParamVariable}\n                    onChange={() => {\n                        setUseStatParamVariable(!useStatParamVariable);\n                        onChange({ ...query, useStatParamVariable: !query.useStatParamVariable });\n                    }}\n                />\n                </div>     \n            </InlineField>\n            {!useStatParamVariable ? (\n                <InlineField labelWidth={16}>\n                <AsyncMultiSelect\n                    key={accounts}\n                    value={statParamsSelected}\n                    loadOptions={loadFlespiStatsParameters}\n                    defaultOptions\n                    cacheOptions\n                    onChange={(option: any) => {\n                        setStatParamsSelected(option);\n                        onChange({ ...query, statParamsSelected: option.map((param: SelectableValue<string>) => { return param.value!; }) });\n                        onRunQuery();\n                    }}\n                    width={40}\n                    noOptionsMessage={`Satistics not found for accounts' IDs: ${accounts}`}\n                    allowCustomValue={true}\n                />\n            </InlineField>\n            ) : (\n            <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"parameter\"\n                    value={statParamVariable}\n                    onChange={(event: any) => {\n                        setStatParamVariable(event.target.value);\n                        onChange({ ...query, statParamVariable: event.target.value });\n                    }}\n                    onKeyDown={(event: any) => {\n                        if (event.key !== 'Enter') {\n                            return;\n                        }   \n                        onRunQuery();\n                        processVariableInput(event.target.value, query, 'statParamVariable', setStatParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'statParamVariable', setStatParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$parameter\"\n                />\n            </InlineField>\n            )}\n        </div>\n    );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { InlineField, Select } from \"@grafana/ui\";\nimport { defaults } from \"lodash\";\nimport { GEN_FUNC_OPTIONS, QUERY_TYPE_DEVICES, QUERY_TYPE_STATISTICS, QUERY_TYPE_CONTAINERS } from \"../constants\";\n\n\nexport function GneralizationFunction(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery } = props;\n    const query = defaults(props.query, defaultQuery);\n\n    const [ genFunc, setGenFunc ] = useState<SelectableValue<string>>({ \n        label: query.generalizationFunction, \n        value: query.generalizationFunction \n    });\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query types devices, statistics and containers\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_DEVICES && query.queryType !== QUERY_TYPE_STATISTICS && query.queryType !== QUERY_TYPE_CONTAINERS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify generalization function for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n        <InlineField label=\"Generalization Function\" labelWidth={26}>\n        <Select\n            value={genFunc}\n            options={GEN_FUNC_OPTIONS}\n            onChange={option => {\n                setGenFunc(option);\n                onChange({ ...query, generalizationFunction: option.value });\n                onRunQuery();\n            }}\n        />\n        </InlineField>\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { InlineField, InlineLabel, Input, MultiSelect, Switch } from \"@grafana/ui\";\nimport { LOGS_SOURCE_DEVICE, LOGS_SOURCE_STREAM, QUERY_TYPE_LOGS } from \"../constants\";\nimport { DataSource } from \"datasource\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { prepareSelectOption, processVariableInput } from \"utils\";\n\nexport function LogsSource(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    const [ logsSources, setLogsSources ] = useState<Array<SelectableValue<number>>>([]);\n    const [ useLogsSourceVariable, setUseLogsSourceVariable ] = useState<boolean>(query.useLogsSourceVariable);\n    const [ logsSourceVariable, setLogsSourceVariable ] = useState<string>(query.logsSourceVariable);\n    const [ logsSourcesSelected, setLogsSourcesSelected ] = useState<Array<SelectableValue<number>>>(query.logsSourcesSelected);\n    const [ error, setError ] = useState<string>(\"\");\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load all available logs sources for future use as select options\n    /////////////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n        const fetchLogsSources = async () => {\n            let values\n            if (query.logsSourceType === LOGS_SOURCE_DEVICE) {\n                values = (await FlespiSDK.fetchAllFlespiDevices(datasource.url)).map(device => (prepareSelectOption(device.name, device.id)));\n            } else {\n                // query.logsSourceType === LOGS_SOURCE_STREAM\n                values = (await FlespiSDK.fetchAllFlespiStreams(datasource.url)).map(stream => (prepareSelectOption(stream.name, stream.id)));\n            }\n            setLogsSources(values);\n        }\n        fetchLogsSources().catch(console.error);\n    }, [datasource, query]);\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_LOGS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_LOGS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify flespi items for query\n    /////////////////////////////////////////////////////////////////////////////////\n    let tooltip, label, placeholderSelect, placeholderInput\n    switch(query.logsSourceType) {\n        case LOGS_SOURCE_DEVICE:\n            label = 'Devices';\n            tooltip = 'Choose devices for query';\n            placeholderSelect = 'Select device';\n            placeholderInput = '$device';\n            break;\n        case LOGS_SOURCE_STREAM:\n            label = 'Streams';\n            tooltip = 'Choose streams for query';\n            placeholderSelect = 'Select stream';\n            placeholderInput = '$stream';\n            break;\n    }\n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip={tooltip}>\n                {label}\n            </InlineLabel>\n          <InlineField label=\"Use dashboard variable\">\n            <div className='gf-form-switch'>\n              <Switch\n                value={!!useLogsSourceVariable}\n                onChange={() => {\n                    setUseLogsSourceVariable(!useLogsSourceVariable);\n                    onChange({ ...query, useLogsSourceVariable: !query.useLogsSourceVariable });\n                }}\n              />\n            </div>\n          </InlineField>\n          {!useLogsSourceVariable ? (\n            // if useLogsSourceVariable==false - render Select with logs sources for the user to select a one for the query\n            <InlineField>\n              <MultiSelect \n                value={logsSourcesSelected}\n                options={logsSources}\n                onChange={(option: Array<SelectableValue<number>>) => {\n                    setLogsSourcesSelected(option);\n                    onChange({ ...query, logsSourcesSelected: option });\n                    onRunQuery();\n                }}\n                width={40}\n                placeholder={placeholderSelect}\n              />\n            </InlineField>\n          ) : (\n            // if useLogsSourceVariable==true - render Input where user will type name of the variable to take logs source from\n            <InlineField invalid={error ? true : false} error={error}>\n              <Input\n                name=\"logsSource\"\n                value={logsSourceVariable}\n                onChange={(event: any) => {\n                    setLogsSourceVariable(event.target.value);\n                }}\n                onKeyDown={(event: any) => {\n                    // process 'Enter' key down event only\n                    if (event.key !== 'Enter') {\n                        return;\n                    }\n                    processVariableInput(event.target.value, query, 'logsSourceVariable', setLogsSourceVariable, setError, onChange, onRunQuery);\n                }}\n                onBlur={(event: any) => {\n                    processVariableInput(event.target.value, query, 'logsSourceVariable', setLogsSourceVariable, setError, onChange, onRunQuery);\n                }}\n                required\n                type=\"text\"\n                width={40}\n                placeholder={placeholderInput}\n              />\n            </InlineField>\n          )}\n        </div>\n    );\n}\n","import { QueryEditorProps } from \"@grafana/data\";\nimport { InlineField, RadioButtonGroup } from \"@grafana/ui\";\nimport { LOGS_SOURCE_OPTIONS, QUERY_TYPE_LOGS } from \"../constants\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { defaults } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\n\n\nexport function LogsSourceType(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, query } = props;  \n    const defaultedQuery = defaults(query, defaultQuery);\n    const [ logsSourceType, setLogsSourceType ] = useState<string>(defaultedQuery.logsSourceType);\n    \n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_LOGS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_LOGS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render Logs Source Type element: radio buttons group \n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n          <InlineField label=\"Logs Source\" labelWidth={26}>\n            <RadioButtonGroup \n                options={LOGS_SOURCE_OPTIONS}\n                value={logsSourceType} \n                onChange={(event: any) => {\n                    setLogsSourceType(event);\n                    onChange({ ...query, logsSourceType: event }); \n                }} />\n          </InlineField>\n        </div>\n      );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { InlineField, InlineLabel, Input, MultiSelect, Switch } from \"@grafana/ui\";\nimport { LOGS_PARAMS_DEVICE_OPTIONS, LOGS_PARAMS_STREAM_OPTIONS, LOGS_SOURCE_DEVICE, LOGS_SOURCE_STREAM, QUERY_TYPE_LOGS } from \"../constants\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { defaults } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { processVariableInput } from \"utils\";\n\nexport function LogParameter(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery } = props;\n    const query = defaults(props.query, defaultQuery);\n\n    const [ useLogsParamVariable, setUseLogsParamVariable ] = useState<boolean>(query.useLogsParamVariable);\n    const [ logsParamVariable, setLogsParamVariable ] = useState<string>(query.logsParamVariable);\n    const [ logsParamsSelected, setLogsParamsSelected ] = useState<Array<SelectableValue<string>>>(() => {\n        if (query.logsParamsSelected) {\n            return query.logsParamsSelected.map(parameter => ({label: parameter, value: parameter}));\n        }\n        return [];\n    });\n    const [ error, setError ] = useState<string>(\"\");\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_LOGS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_LOGS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify logs parameters of flespi items for query\n    /////////////////////////////////////////////////////////////////////////////////\n    let options;\n    switch(query.logsSourceType) {\n        case LOGS_SOURCE_DEVICE:\n            options = LOGS_PARAMS_DEVICE_OPTIONS;\n            break;\n        case LOGS_SOURCE_STREAM:\n            options = LOGS_PARAMS_STREAM_OPTIONS;\n            break;\n    }\n    return (\n        <div  className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose logs parameters for query\">\n                Parameters\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                <Switch\n                    value={!!useLogsParamVariable}\n                    onChange={() => {\n                        setUseLogsParamVariable(!useLogsParamVariable);\n                        onChange({ ...query, useLogsParamVariable: !query.useLogsParamVariable });\n                    }}\n                />\n                </div>     \n            </InlineField>\n        {!useLogsParamVariable ? (\n            <InlineField labelWidth={16}>\n                <MultiSelect\n                    value={logsParamsSelected}\n                    options={options}\n                    onChange={(option: any) => {\n                        setLogsParamsSelected(option);\n                        onChange({ ...query, logsParamsSelected: option.map((param: SelectableValue<string>) => (param.value!)) });\n                        onRunQuery();\n                    }}\n                    width={40}\n                    allowCustomValue={true}\n                />\n            </InlineField>\n            ) : (\n            <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"parameter\"\n                    value={logsParamVariable}\n                    onChange={(event: any) => {\n                        setLogsParamVariable(event.target.value);\n                        onChange({ ...query, logsParamVariable: event.target.value });\n                    }}\n                    onKeyDown={(event: any) => {\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        onRunQuery();\n                        processVariableInput(event.target.value, query, 'logsParamVariable', setLogsParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'logsParamVariable', setLogsParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$parameter\"\n                />\n            </InlineField>\n        )}\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { InlineField, InlineLabel, Input, Switch, MultiSelect } from \"@grafana/ui\";\nimport React, { ReactElement, useState, useEffect } from \"react\";\nimport { QUERY_TYPE_CONTAINERS } from \"../constants\";\nimport { DataSource } from \"datasource\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { prepareSelectOption, processVariableInput } from \"utils\";\n\nexport function Container(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    const [ containers, setContainers ] = useState<Array<SelectableValue<number>>>([]);\n    const [ useContainerVariable, setUseContainerVariable ] = useState<boolean>(query.useContainerVariable);\n    const [ containerVariable, setContainerVariable ] = useState<string>(query.containerVariable);\n    const [ containersSelected, setContainersSelected ] = useState<Array<SelectableValue<number>>>(query.containersSelected);\n    const [ error, setError ] = useState<string>(\"\");\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load all available containers for future use as select options\n    /////////////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n        // load containers and store them into state for the later use in drop-down\n        const fetchContainers = async () => {\n          const values = (await FlespiSDK.fetchAllFlespiContainers(datasource.url)).map(container => (prepareSelectOption(container.name, container.id)));\n          setContainers(values);\n        }\n        fetchContainers().catch(console.error);\n    }, [datasource, query]);\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_CONTAINERS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_CONTAINERS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify flespi container for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose containers for query\">\n            Containers\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                    <Switch\n                        value={!!useContainerVariable}\n                        onChange={() => {\n                            setUseContainerVariable(!useContainerVariable);\n                            onChange({ ...query, useContainerVariable: !query.useContainerVariable });\n                        }}\n                    />\n                </div>\n            </InlineField>\n            {!useContainerVariable ? (\n                // if useContainerVariable==false - render Select with containers for the user to select a container for the query\n                <InlineField>\n                    <MultiSelect \n                        value={containersSelected}\n                        options={containers}\n                        onChange={(option: Array<SelectableValue<number>>) => {\n                            setContainersSelected(option);\n                            onChange({ ...query, containersSelected: option });\n                            onRunQuery();\n                        }}\n                        width={40}\n                        placeholder=\"Select container\"\n                    />\n                </InlineField>\n            ) : (\n                // if useContainerVariable==true - render Input where user will type name of the variable to take container from\n                <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"container\"\n                    value={containerVariable}\n                    onChange={(event: any) => {\n                        setContainerVariable(event.target.value);\n                    }}\n                    onKeyDown={(event: any) => {\n                        // process 'Enter' key down event only\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        processVariableInput(event.target.value, query, 'containerVariable', setContainerVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'containerVariable', setContainerVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$container\"\n                />\n                </InlineField>\n            )}\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { AsyncMultiSelect, InlineField, InlineLabel, Input, Switch } from \"@grafana/ui\";\nimport { QUERY_TYPE_CONTAINERS } from \"../constants\";\nimport { DataSource, defaultQuery } from \"datasource\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { defaults } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { processVariableInput } from \"utils\";\n\n\nexport function ContainerParameter(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource } = props;\n    const query = defaults(props.query, defaultQuery);\n\n    const [ useContParamVariable, setUseContParamVariable ] = useState<boolean>(query.useContParamVariable);\n    const [ contParamVariable, setContParamVariable ] = useState<string>(query.contParamVariable);\n    const [ contParamsSelected, setContParamsSelected ] = useState<Array<SelectableValue<string>>>(() => {\n        if (query.contParamsSelected) {\n            return query.contParamsSelected.map((parameter: string) => ({label: parameter, value: parameter}));\n        }\n        return [];\n    });\n    const [ error, setError ] = useState<string>(\"\");\n    const containersSelected = query.containersSelected;\n    const containers = containersSelected.map((container: SelectableValue<number>) => container.value).join();\n\n    // load container parameters for the containers selected in the drop down\n    const loadFlespiContainerParameters = async (inputValue: string) => {\n        if (containersSelected.toString() === '') {\n            // container is not yet selected, return empty array of parameters\n            return Promise.resolve([]);\n        }\n        // fetch container parameters for all selected container\n        const contParams = await Promise.all(containersSelected.map(container => {\n            return FlespiSDK.fetchFlespiContainerParameters(container.value ? container.value : 0, datasource.url, inputValue).then((result: string[]) => {\n                return result\n                // filter parameters based on user input in Parameter select field\n                .filter((parameter: string) => parameter.toLowerCase().includes(inputValue));\n            });\n        }));\n        const containersParameters = (await Promise.all(contParams)).flat();\n        const containersParametersUnique = new Set(containersParameters);\n\n        return Array.from(containersParametersUnique.values())\n            .sort()\n            .map((parameter: string) => ({value: parameter, label: parameter}));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_CONTAINERS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_CONTAINERS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify container parameters for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div  className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose container parameters for query\">\n                Parameters\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                <Switch\n                    value={!!useContParamVariable}\n                    onChange={() => {\n                        setUseContParamVariable(!useContParamVariable);\n                        onChange({ ...query, useContParamVariable: !query.useContParamVariable });\n                    }}\n                />\n                </div>     \n            </InlineField>\n        {!useContParamVariable ? (\n            <InlineField labelWidth={16}>\n                <AsyncMultiSelect\n                    key={containers}\n                    value={contParamsSelected}\n                    loadOptions={loadFlespiContainerParameters}\n                    defaultOptions\n                    cacheOptions\n                    onChange={(option: any) => {\n                        setContParamsSelected(option);\n                        onChange({ ...query, contParamsSelected: option.map((param: SelectableValue<string>) => { return param.value!; }) });\n                        onRunQuery();\n                    }}\n                    width={40}\n                    noOptionsMessage={`Container parameters not found for containers' IDs: ${containers}`}\n                    allowCustomValue={true}\n                />\n            </InlineField>\n            ) : (\n            <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"parameter\"\n                    value={contParamVariable}\n                    onChange={(event: any) => {\n                        setContParamVariable(event.target.value);\n                        onChange({ ...query, contParamVariable: event.target.value });\n                    }}\n                    onKeyDown={(event: any) => {\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        onRunQuery();\n                        processVariableInput(event.target.value, query, 'contParamVariable', setContParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'contParamVariable', setContParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$parameter\"\n                />\n            </InlineField>\n        )}\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { DataSource } from \"datasource\";\nimport React, { ReactElement, useState, useEffect } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { InlineLabel, InlineField, Switch, Input, MultiSelect } from \"@grafana/ui\";\nimport { QUERY_TYPE_INTERVALS } from \"../constants\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { prepareSelectOption, processVariableInput } from \"utils\";\n\nexport function Calculator(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    const [ calculatorsSelected, setCalculatorsSelected ] = useState<Array<SelectableValue<number>>>(query.calculatorsSelected);\n    const [ calculators, setCalculators ] = useState<Array<SelectableValue<number>>>([]);\n    const [ useCalculatorVariable, setUseCalculatorVariable ] = useState<boolean>(query.useCalculatorVariable);\n    const [ calculatorVariable, setCalculatorVariable ] = useState<string>(query.calculatorVariable);\n    const [ error, setError ] = useState<string>(\"\");\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // load all available calculators for future use as select options\n    /////////////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n        const fetchCalculators = async () => {\n          const values = (await FlespiSDK.fetchAllFlespiCalculators(datasource.url)).map(calculator => (prepareSelectOption(calculator.name, calculator.id)));\n          setCalculators(values);\n        }\n        fetchCalculators().catch(console.error);\n    }, [datasource, query]);\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_INTERVALS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_INTERVALS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify flespi calcualtor for query\n    /////////////////////////////////////////////////////////////////////////////////   \n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose calculator for query\">\n            Calculator\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                    <Switch\n                        value={!!useCalculatorVariable}\n                        onChange={() => {\n                            setUseCalculatorVariable(!useCalculatorVariable);\n                            onChange({ ...query, useCalculatorVariable: !query.useCalculatorVariable });\n                        }}\n                    />\n                </div>\n            </InlineField>\n            {!useCalculatorVariable ? (\n                <InlineField>\n                    <MultiSelect\n                        placeholder=\"Select calculator\"\n                        value={calculatorsSelected}\n                        options={calculators}\n                        width={40}\n                        onChange={(option: Array<SelectableValue<number>>) => {\n                            setCalculatorsSelected(option);\n                            onChange({ ...query, calculatorsSelected: option });\n                            onRunQuery();\n                        }}\n                    />\n                </InlineField>\n            ) : (\n                <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"calculator\"\n                    value={calculatorVariable}\n                    onChange={(event: any) => {\n                        setCalculatorVariable(event.target.value);\n                    }}\n                    onKeyDown={(event: any) => {\n                        // process 'Enter' key down event only\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        processVariableInput(event.target.value, query, 'calculatorVariable', setCalculatorVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'calculatorVariable', setCalculatorVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$calculator\"\n                />\n                </InlineField>\n            )}\n        </div>\n    );\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { DataSource } from \"datasource\";\nimport { QUERY_TYPE_INTERVALS } from \"../constants\";\nimport React, { ReactElement, useState } from \"react\";\nimport { InlineLabel, InlineField, AsyncMultiSelect, Switch, Input } from \"@grafana/ui\";\nimport { FlespiSDK, FlespiEntity } from \"flespi-sdk\";\nimport { prepareItemsAndLabelsFromSelectedOptions, prepareItemsAndLabelsFromVariable, prepareSelectOption, processVariableInput } from \"utils\";\n\nexport function CalcDevice(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    const [ calcDevicesSelected, setCalcDevicesSelected ] = useState<Array<SelectableValue<number>>>(query.calcDevicesSelected);\n    const [ useCalcDeviceVariable, setUseCalcDeviceVariable ] = useState<boolean>(query.useCalcDeviceVariable);\n    const [ calcDeviceVariable, setCalcDeviceVariable ] = useState<string>(query.calcDeviceVariable);\n    const [ error, setError ] = useState<string>(\"\");\n\n    // prepare list of selected calculators\n    const calcIds: string[] = (query.useCalculatorVariable === true) ? prepareItemsAndLabelsFromVariable(query.calculatorVariable, {}) : prepareItemsAndLabelsFromSelectedOptions(query.calculatorsSelected);\n    const calculators = calcIds.join();\n\n    const loadCalcDevices = async (inputValue: string) => {\n        if (calculators === '') {\n            // calculator is not yet selected, return empty array of devices\n            return Promise.resolve([]);\n        }\n        const calcDevices = (await Promise.all(query.calculatorsSelected.map(calculator => {\n            return FlespiSDK.fetchFlespiDevicesAssignedToCalculator(calculator.value ? calculator.value : 0, datasource.url)\n                            .then((result: FlespiEntity[]) => (result.filter(device => (device.name.toLowerCase().includes(inputValue)))));\n            }))).flat();\n        return Array.from(new Set(calcDevices).values())\n            .sort()\n            .map(device => (prepareSelectOption(device.name, device.id))); \n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_INTERVALS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_INTERVALS) {\n        return <div/>;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////\n    // render controls to specify flespi calcualtor's device for query\n    ///////////////////////////////////////////////////////////////////////////////// \n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose calc's device for query\">\n            Device\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                    <Switch\n                        value={!!useCalcDeviceVariable}\n                        onChange={() => {\n                            setUseCalcDeviceVariable(!useCalcDeviceVariable);\n                            onChange({ ...query, useCalcDeviceVariable: !query.useCalcDeviceVariable });\n                        }}\n                    />\n                </div>\n            </InlineField>\n            {!useCalcDeviceVariable ? (\n                <InlineField>\n                    <AsyncMultiSelect\n                        key={calculators}\n                        value={calcDevicesSelected}\n                        loadOptions={loadCalcDevices}\n                        onChange={(option: Array<SelectableValue<number>>) => {\n                            setCalcDevicesSelected(option);\n                            onChange({ ...query, calcDevicesSelected: option });\n                            onRunQuery();\n                        }}\n                        defaultOptions\n                        cacheOptions\n                        width={40}\n                        placeholder=''\n                    />\n                </InlineField>\n            ) : (\n                <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"calcdevice\"\n                    value={calcDeviceVariable}\n                    onChange={(event: any) => {\n                        setCalcDeviceVariable(event.target.value);\n                    }}\n                    onKeyDown={(event: any) => {\n                        // process 'Enter' key down event only\n                        if (event.key !== 'Enter') {\n                            return;\n                        }\n                        processVariableInput(event.target.value, query, 'calcDeviceVariable', setCalcDeviceVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'calcDeviceVariable', setCalcDeviceVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$calcdevice\"\n                />\n                </InlineField>\n            )}\n        </div>\n    );\n\n}\n","import { QueryEditorProps, SelectableValue } from \"@grafana/data\";\nimport { QUERY_TYPE_INTERVALS } from \"../constants\";\nimport { DataSource } from \"datasource\";\nimport React, { useState, ReactElement } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { AsyncMultiSelect, InlineField, InlineLabel, Input, Switch } from \"@grafana/ui\";\nimport { FlespiSDK } from \"flespi-sdk\";\nimport { prepareItemsAndLabelsFromSelectedOptions, prepareItemsAndLabelsFromVariable, processVariableInput } from \"utils\";\n\n\nexport function IntervalParameter(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    const [ useIntParamVariable, setUseIntParamVariable ] = useState<boolean>(query.useIntParamVariable);\n    const [ intParamVariable, setIntParamVariable ] = useState<string>(query.intParamVariable);\n    const [ intParamsSelected, setIntParamsSelected ] = useState<Array<SelectableValue<string>>>(() => {\n        if (query.intParamsSelected) {\n            return query.intParamsSelected.map((parameter: string) => ({label: parameter, value: parameter}));\n        }\n        return [];\n    });\n    const [ error, setError ] = useState<string>(\"\");\n\n    // prepare list of selected calculators\n    const calcIds: string[] = (query.useCalculatorVariable === true) ? prepareItemsAndLabelsFromVariable(query.calculatorVariable, {}) : prepareItemsAndLabelsFromSelectedOptions(query.calculatorsSelected);\n    const calculators = calcIds.join();\n\n    // load intervals parameters for the selected calculators\n    const loadFlespiIntervalParameters = async (inputValue: string) => {\n        if (calculators === '') {\n            // calculator is not yet selected, return empty array of parameters\n            return Promise.resolve([]);\n        }\n        const intParameters = (await Promise.all(calcIds.map(calculator => {\n            return FlespiSDK.fetchFlespiIntervalParameters(calculator, datasource.url)\n                            .then((result: string[]) => (result.filter((parameter: string) => parameter.toLowerCase().includes(inputValue))));\n            }))).flat();\n        return Array.from(new Set(intParameters).values())\n            .sort()\n            .map((parameter: string) => ({value: parameter, label: parameter})); \n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render these controls only for query type QUERY_TYPE_INTERVALS\n    /////////////////////////////////////////////////////////////////////////////////\n    if (query.queryType !== QUERY_TYPE_INTERVALS) {\n        return <div/>;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // render controls to specify intervals parameters for query\n    /////////////////////////////////////////////////////////////////////////////////\n    return (\n        <div className=\"gf-form\">\n            <InlineLabel width={16} tooltip=\"Choose interval parameters for query\">\n                Parameters\n            </InlineLabel>\n            <InlineField label=\"Use dashboard variable\">\n                <div className='gf-form-switch'>\n                <Switch\n                    value={!!useIntParamVariable}\n                    onChange={() => {\n                        setUseIntParamVariable(!useIntParamVariable);\n                        onChange({ ...query, useIntParamVariable: !query.useIntParamVariable });\n                    }}\n                />\n                </div>     \n            </InlineField>\n            {!useIntParamVariable ? (\n                <InlineField labelWidth={16}>\n                    <AsyncMultiSelect\n                        key={calculators}\n                        value={intParamsSelected}\n                        loadOptions={loadFlespiIntervalParameters}\n                        defaultOptions\n                        cacheOptions\n                        onChange={(option: any) => {\n                            setIntParamsSelected(option);\n                            onChange({ ...query, intParamsSelected: option.map((param: SelectableValue<string>) => (param.value!)) });\n                            onRunQuery();\n                        }}\n                        width={40}\n                        noOptionsMessage={`Intervals not found for calculators' IDs: ${calculators}`}\n                        allowCustomValue={true}\n                        placeholder=''\n                    />\n                </InlineField>\n            ) : (\n                <InlineField invalid={error ? true : false} error={error}>\n                <Input\n                    name=\"parameter\"\n                    value={intParamVariable}\n                    onChange={(event: any) => {\n                        setIntParamVariable(event.target.value);\n                        onChange({ ...query, intParamVariable: event.target.value });\n                    }}\n                    onKeyDown={(event: any) => {\n                        if (event.key !== 'Enter') {\n                            return;\n                        }   \n                        onRunQuery();\n                        processVariableInput(event.target.value, query, 'intParamVariable', setIntParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    onBlur={(event: any) => {\n                        processVariableInput(event.target.value, query, 'intParamVariable', setIntParamVariable, setError, onChange, onRunQuery);\n                    }}\n                    required\n                    type=\"text\"\n                    width={40}\n                    placeholder=\"$parameter\"\n                />\n            </InlineField>\n            )}\n        </div>\n    );\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from 'components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n\n  // Secure field (only sent to the backend)\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  const onResetAPIKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiKey: '',\n      },\n    });\n  };\n\n  const { secureJsonFields } = options;\n  const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Flespi Token\" labelWidth={12}>\n        <SecretInput\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\n          value={secureJsonData.apiKey || ''}\n          placeholder=\"paste your flespi token here\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import { QueryEditorProps } from \"@grafana/data\";\nimport { DataSource } from \"datasource\";\nimport React, { ReactElement } from \"react\";\nimport { MyDataSourceOptions, MyQuery } from \"types\";\nimport { Device } from \"./QueryEditorDeviceComponent\";\nimport { QueryType } from \"./QueryEditorQueryTypeComponent\";\nimport { Account } from \"./QueryEditorAccountComponent\";\nimport { TelemetryParameter } from \"./QueryEditorTelemParamComponent\";\nimport { StatisticsParameter } from \"./QueryEditorStatParamComponent\";\nimport { GneralizationFunction } from \"./QueryEditorGenFuncComponent\";\nimport { tempBackwardCompatibilityConversion } from \"../constants\";\nimport { LogsSource } from \"./QueryEditorLogsSourceComponent\";\nimport { LogsSourceType } from \"./QueryEditorLogsSourceTypeComponent\";\nimport { LogParameter } from \"./QueryEditorLogParamComponent\";\nimport { Container } from \"./QueryEditorContainerComponent\";\nimport { ContainerParameter } from \"./QueryEditorContParamComponent\";\nimport { Calculator } from \"./QueryEditorCalculatorComponent\";\nimport { CalcDevice } from \"./QueryEditorCalcDeviceComponent\";\nimport { IntervalParameter } from \"./QueryEditorIntParamComponent\";\n\nexport function QueryEditor(props: QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>): ReactElement {\n    const { onChange, onRunQuery, datasource, query } = props;\n    if (tempBackwardCompatibilityConversion(query) === true) {\n        // save chages to query, if backward compatibility was applied\n        onChange(query);\n    }\n\n    return (\n        <>\n            <QueryType datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <Device datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <TelemetryParameter datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <Account datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <StatisticsParameter datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <Container datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <ContainerParameter datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange}/>\n            <GneralizationFunction datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <LogsSourceType datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <LogsSource datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <LogParameter datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <Calculator datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <CalcDevice datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n            <IntervalParameter datasource={datasource} query={query} onRunQuery={onRunQuery} onChange={onChange} />\n        </>\n    );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__650__","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","isFunction","extendStatics","b","setPrototypeOf","__proto__","Array","p","__extends","TypeError","String","__","this","constructor","create","__values","s","iterator","m","i","length","next","done","__read","e","ar","push","error","__spreadArray","to","from","pack","arguments","l","slice","concat","ctorFunc","UnsubscriptionError","errors","instance","Error","stack","message","map","err","toString","join","name","arrRemove","arr","item","index","indexOf","splice","Subscription","initialTeardown","closed","_parentage","_finalizers","empty","unsubscribe","e_1","_a","e_2","_b","isArray","_parentage_1","_parentage_1_1","remove","e_1_1","return","initialFinalizer","_finalizers_1","_finalizers_1_1","finalizer","execFinalizer","e_2_1","add","teardown","_hasParent","_addParent","parent","includes","_removeParent","EMPTY","timeoutProvider","setTimeout","handler","timeout","args","_i","delegate","apply","clearTimeout","handle","noop","COMPLETE_NOTIFICATION","createNotification","kind","Subscriber","_super","destination","_this","isStopped","EMPTY_OBSERVER","complete","SafeSubscriber","handleStoppedNotification","nextNotification","_next","_error","_complete","_bind","Function","bind","fn","thisArg","ConsumerObserver","partialObserver","handleUnhandledError","observerOrNext","context_1","reportUnhandledError","notification","subscriber","onStoppedNotification","OperatorSubscriber","onNext","onComplete","onError","onFinalize","shouldUnsubscribe","closed_1","project","init","source","subscribe","lift","hasLift","liftedSource","FlespiSDK","fetchAllFlespiDevices","url","observableResponse","getBackendSrv","fetch","routePath","method","lastValueFrom","data","result","fetchDeviceTelemetryParameters","deviceId","telemetry","Promise","resolve","devicesTelemetryParameters","parameter","fetchFlespiDevicesMessages","parameters","genFunction","genInterval","requestParameters","fetchFlespiDevicesLogs","fetchAllFlespiSubaccounts","fetchFlespiAccount","fetchFlespiStatisticsParametersForAccount","accountId","headers","statistics","statisticsParameters","fetchFlespiAccountsStatistics","fetchAllFlespiStreams","fetchFlespiStreamsLogs","streamId","fetchAllFlespiContainers","fetchFlespiContainerParameters","containerId","parameterMask","params","containerParameters","keys","param","fetchFlespiContainersMessages","fetchAllFlespiCalculators","fetchFlespiDevicesAssignedToCalculator","calcId","fetchFlespiIntervalParameters","fetchFlespiIntervals","REGEX_DEVICES","REGEX_ACCOUNTS","REGEX_CONTAINERS","REGEX_CALCULATORS","QUERY_TYPE_DEVICES","QUERY_TYPE_STATISTICS","QUERY_TYPE_LOGS","QUERY_TYPE_CONTAINERS","QUERY_TYPE_INTERVALS","QUERY_TYPE_OPTIONS","label","GEN_FUNC_AVERAGE","GEN_FUNC_OPTIONS","LOGS_SOURCE_DEVICE","LOGS_SOURCE_STREAM","LOGS_SOURCE_OPTIONS","LOGS_PARAMS_DEVICE_OPTIONS","LOGS_PARAMS_STREAM_OPTIONS","tempBackwardCompatibilityConversion","query","queryType","entity","useDeviceVariable","devicesSelected","entityLabel","parseInt","deviceVariable","useTelemParamVariable","telemParamVariable","telemParamsSelected","generalizationFunction","func","processVariableInput","inputValue","queryFieldName","setVariable","setError","onChange","onRunQuery","interpolations","getTemplateSrv","replace","found","prepareVariableOption","itemName","itemId","text","prepareSelectOption","prepareItemsAndLabelsFromSelectedOptions","itemsSelected","itemsLabels","prepareItemsAndLabelsFromVariable","variableName","scopedVars","items","split","currentVariable","getVariables","find","variable","options","JSON","parse","stringify","option","handleFetchDataQueryResponse","response","refId","labels","timeValues","parametersValues","knownParameters","valuesArrayLength","messages","messagesCount","timestamp","messageRest","time","ii","parameterName","parameterValue","iii","createDataFrame","frame","MutableDataFrame","fields","type","FieldType","values","fieldName","fieldType","number","string","boolean","other","addField","defaultQuery","useAccountVariable","accountsSelected","accountVariable","useStatParamVariable","statParamsSelected","statParamVariable","logsSourceType","useLogsSourceVariable","logsSourcesSelected","logsSourceVariable","useLogsParamVariable","logsParamsSelected","logsParamVariable","useContainerVariable","containersSelected","containerVariable","useContParamVariable","contParamsSelected","contParamVariable","useCalculatorVariable","calculatorsSelected","calculatorVariable","useCalcDeviceVariable","calcDevicesSelected","calcDeviceVariable","useIntParamVariable","intParamsSelected","intParamVariable","DataSource","DataSourceApi","metricFindQuery","trim","stream","id","interpolated","variableQueryParsed","match","device","accounts","all","flat","account","container","calculator","endsWith","calculatorId","testDatasource","flespiDevices","flespiAccount","flespiSubaccounts","flespiStreams","status","observableResponses","targets","console","log","range","Math","floor","valueOf","ceil","intervalSec","__interval_ms","maxDataPoints","devices","telemParameters","devicesLabels","Observable","deviceObservableResponses","pipe","merge","statParameters","accountsLabels","accountObservableResponses","logParameters","streams","streamsLabels","streamObservableResponses","containers","contParameters","containersLabels","containerObservableResponses","calculators","calcDevices","intParameters","calculatorsLabels","calcDevicesLabels","calculatorsObservableResponses","devicesObservableResponses","intervalsCount","interval","begin","end","parameterValues","handleFetchIntervalsResponse","instanceSettings","super","Device","props","datasource","setDevices","useState","setUseDeviceVariable","setDeviceVariable","setDevicesSelected","useEffect","fetchDevices","catch","div","className","InlineLabel","width","tooltip","InlineField","Switch","invalid","Input","event","target","onKeyDown","onBlur","required","placeholder","MultiSelect","QueryType","defaultedQuery","defaults","setQueryType","labelWidth","RadioButtonGroup","Account","setAccounts","setUseAccoutVariable","setAccountVariable","setAccountSelected","fetchAccounts","TelemetryParameter","setUseTelemParamVariable","setTelemParamVariable","setTelemParamsSelected","devicesIds","loadFlespiDevicesParameters","telemetries","then","filter","toLowerCase","telemetryParameters","telemetryParametersUnique","Set","sort","AsyncMultiSelect","loadOptions","defaultOptions","cacheOptions","noOptionsMessage","allowCustomValue","StatisticsParameter","setUseStatParamVariable","setStatParamVariable","setStatParamsSelected","accountsIDds","loadFlespiStatsParameters","statisticsParametersUnique","GneralizationFunction","genFunc","setGenFunc","Select","LogsSource","logsSources","setLogsSources","setUseLogsSourceVariable","setLogsSourceVariable","setLogsSourcesSelected","fetchLogsSources","placeholderSelect","placeholderInput","LogsSourceType","setLogsSourceType","LogParameter","setUseLogsParamVariable","setLogsParamVariable","setLogsParamsSelected","Container","setContainers","setUseContainerVariable","setContainerVariable","setContainersSelected","fetchContainers","ContainerParameter","setUseContParamVariable","setContParamVariable","setContParamsSelected","loadFlespiContainerParameters","contParams","containersParameters","containersParametersUnique","Calculator","setCalculatorsSelected","setCalculators","setUseCalculatorVariable","setCalculatorVariable","fetchCalculators","CalcDevice","setCalcDevicesSelected","setUseCalcDeviceVariable","setCalcDeviceVariable","loadCalcDevices","IntervalParameter","setUseIntParamVariable","setIntParamVariable","setIntParamsSelected","calcIds","loadFlespiIntervalParameters","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","secureJsonFields","secureJsonData","SecretInput","isConfigured","apiKey","onReset","setQueryEditor"],"sourceRoot":""}